"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("amp",{

/***/ "./node_modules/next/dist/shared/lib/router/router.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/router.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("// tslint:disable:no-console\n\n\nvar _defineProperty = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"./node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\n\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n\n_export(exports, {\n  default: function () {\n    return Router;\n  },\n  matchesMiddleware: function () {\n    return matchesMiddleware;\n  },\n  createKey: function () {\n    return createKey;\n  }\n});\n\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\n\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\n\nconst _removetrailingslash = __webpack_require__(/*! ./utils/remove-trailing-slash */ \"./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\n\nconst _routeloader = __webpack_require__(/*! ../../../client/route-loader */ \"./node_modules/next/dist/client/route-loader.js\");\n\nconst _script = __webpack_require__(/*! ../../../client/script */ \"./node_modules/next/dist/client/script.js\");\n\nconst _iserror = /*#__PURE__*/_interop_require_wildcard._(__webpack_require__(/*! ../../../lib/is-error */ \"./node_modules/next/dist/lib/is-error.js\"));\n\nconst _denormalizepagepath = __webpack_require__(/*! ../page-path/denormalize-page-path */ \"./node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js\");\n\nconst _normalizelocalepath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\n\nconst _mitt = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ../mitt */ \"./node_modules/next/dist/shared/lib/mitt.js\"));\n\nconst _utils = __webpack_require__(/*! ../utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\n\nconst _isdynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\");\n\nconst _parserelativeurl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js\");\n\nconst _resolverewrites = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ./utils/resolve-rewrites */ \"?506d\"));\n\nconst _routematcher = __webpack_require__(/*! ./utils/route-matcher */ \"./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");\n\nconst _routeregex = __webpack_require__(/*! ./utils/route-regex */ \"./node_modules/next/dist/shared/lib/router/utils/route-regex.js\");\n\nconst _formaturl = __webpack_require__(/*! ./utils/format-url */ \"./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\n\nconst _detectdomainlocale = __webpack_require__(/*! ../../../client/detect-domain-locale */ \"./node_modules/next/dist/client/detect-domain-locale.js\");\n\nconst _parsepath = __webpack_require__(/*! ./utils/parse-path */ \"./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\n\nconst _addlocale = __webpack_require__(/*! ../../../client/add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\n\nconst _removelocale = __webpack_require__(/*! ../../../client/remove-locale */ \"./node_modules/next/dist/client/remove-locale.js\");\n\nconst _removebasepath = __webpack_require__(/*! ../../../client/remove-base-path */ \"./node_modules/next/dist/client/remove-base-path.js\");\n\nconst _addbasepath = __webpack_require__(/*! ../../../client/add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\n\nconst _hasbasepath = __webpack_require__(/*! ../../../client/has-base-path */ \"./node_modules/next/dist/client/has-base-path.js\");\n\nconst _isapiroute = __webpack_require__(/*! ../../../lib/is-api-route */ \"./node_modules/next/dist/lib/is-api-route.js\");\n\nconst _getnextpathnameinfo = __webpack_require__(/*! ./utils/get-next-pathname-info */ \"./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\n\nconst _formatnextpathnameinfo = __webpack_require__(/*! ./utils/format-next-pathname-info */ \"./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\n\nconst _comparestates = __webpack_require__(/*! ./utils/compare-states */ \"./node_modules/next/dist/shared/lib/router/utils/compare-states.js\");\n\nconst _islocalurl = __webpack_require__(/*! ./utils/is-local-url */ \"./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\n\nconst _isbot = __webpack_require__(/*! ./utils/is-bot */ \"./node_modules/next/dist/shared/lib/router/utils/is-bot.js\");\n\nconst _omit = __webpack_require__(/*! ./utils/omit */ \"./node_modules/next/dist/shared/lib/router/utils/omit.js\");\n\nconst _resolvehref = __webpack_require__(/*! ./utils/resolve-href */ \"./node_modules/next/dist/shared/lib/router/utils/resolve-href.js\");\n\nconst _interpolateas = __webpack_require__(/*! ./utils/interpolate-as */ \"./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");\n\nconst _handlesmoothscroll = __webpack_require__(/*! ./utils/handle-smooth-scroll */ \"./node_modules/next/dist/shared/lib/router/utils/handle-smooth-scroll.js\");\n\nfunction buildCancellationError() {\n  return Object.assign(new Error(\"Route Cancelled\"), {\n    cancelled: true\n  });\n}\n\nasync function matchesMiddleware(options) {\n  const matchers = await Promise.resolve(options.router.pageLoader.getMiddleware());\n  if (!matchers) return false;\n  const {\n    pathname: asPathname\n  } = (0, _parsepath.parsePath)(options.asPath); // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`\n\n  const cleanedAs = (0, _hasbasepath.hasBasePath)(asPathname) ? (0, _removebasepath.removeBasePath)(asPathname) : asPathname;\n  const asWithBasePathAndLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, options.locale)); // Check only path match on client. Matching \"has\" should be done on server\n  // where we can access more info such as headers, HttpOnly cookie, etc.\n\n  return matchers.some(m => new RegExp(m.regexp).test(asWithBasePathAndLocale));\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(router, url, true);\n  const origin = (0, _utils.getLocationOrigin)();\n  const hrefWasAbsolute = resolvedHref.startsWith(origin);\n  const asWasAbsolute = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefWasAbsolute ? resolvedHref : (0, _addbasepath.addBasePath)(resolvedHref);\n  const preparedAs = as ? stripOrigin((0, _resolvehref.resolveHref)(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asWasAbsolute ? preparedAs : (0, _addbasepath.addBasePath)(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _denormalizepagepath.denormalizePagePath)(pathname));\n\n  if (cleanPathname === \"/404\" || cleanPathname === \"/_error\") {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isdynamic.isDynamicRoute)(page) && (0, _routeregex.getRouteRegex)(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _removetrailingslash.removeTrailingSlash)(pathname);\n}\n\nfunction getMiddlewareData(source, response, options) {\n  const nextConfig = {\n    basePath: options.router.basePath,\n    i18n: {\n      locales: options.router.locales\n    },\n    trailingSlash: Boolean(false)\n  };\n  const rewriteHeader = response.headers.get(\"x-nextjs-rewrite\");\n  let rewriteTarget = rewriteHeader || response.headers.get(\"x-nextjs-matched-path\");\n  const matchedPath = response.headers.get(\"x-matched-path\");\n\n  if (matchedPath && !rewriteTarget && !matchedPath.includes(\"__next_data_catchall\") && !matchedPath.includes(\"/_error\") && !matchedPath.includes(\"/404\")) {\n    // leverage x-matched-path to detect next.config.js rewrites\n    rewriteTarget = matchedPath;\n  }\n\n  if (rewriteTarget) {\n    if (rewriteTarget.startsWith(\"/\") || undefined) {\n      const parsedRewriteTarget = (0, _parserelativeurl.parseRelativeUrl)(rewriteTarget);\n      const pathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(parsedRewriteTarget.pathname, {\n        nextConfig,\n        parseData: true\n      });\n      let fsPathname = (0, _removetrailingslash.removeTrailingSlash)(pathnameInfo.pathname);\n      return Promise.all([options.router.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)()]).then(param => {\n        let [pages, {\n          __rewrites: rewrites\n        }] = param;\n        let as = (0, _addlocale.addLocale)(pathnameInfo.pathname, pathnameInfo.locale);\n\n        if ((0, _isdynamic.isDynamicRoute)(as) || !rewriteHeader && pages.includes((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(as), options.router.locales).pathname)) {\n          const parsedSource = (0, _getnextpathnameinfo.getNextPathnameInfo)((0, _parserelativeurl.parseRelativeUrl)(source).pathname, {\n            parseData: true\n          });\n          as = (0, _addbasepath.addBasePath)(parsedSource.pathname);\n          parsedRewriteTarget.pathname = as;\n        }\n\n        if (false) {} else if (!pages.includes(fsPathname)) {\n          const resolvedPathname = resolveDynamicRoute(fsPathname, pages);\n\n          if (resolvedPathname !== fsPathname) {\n            fsPathname = resolvedPathname;\n          }\n        }\n\n        const resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;\n\n        if ((0, _isdynamic.isDynamicRoute)(resolvedHref)) {\n          const matches = (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(resolvedHref))(as);\n          Object.assign(parsedRewriteTarget.query, matches || {});\n        }\n\n        return {\n          type: \"rewrite\",\n          parsedAs: parsedRewriteTarget,\n          resolvedHref\n        };\n      });\n    }\n\n    const src = (0, _parsepath.parsePath)(source);\n    const pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)(_objectSpread(_objectSpread({}, (0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {\n      nextConfig,\n      parseData: true\n    })), {}, {\n      defaultLocale: options.router.defaultLocale,\n      buildId: \"\"\n    }));\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: \"\" + pathname + src.query + src.hash\n    });\n  }\n\n  const redirectTarget = response.headers.get(\"x-nextjs-redirect\");\n\n  if (redirectTarget) {\n    if (redirectTarget.startsWith(\"/\")) {\n      const src = (0, _parsepath.parsePath)(redirectTarget);\n      const pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)(_objectSpread(_objectSpread({}, (0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {\n        nextConfig,\n        parseData: true\n      })), {}, {\n        defaultLocale: options.router.defaultLocale,\n        buildId: \"\"\n      }));\n      return Promise.resolve({\n        type: \"redirect-internal\",\n        newAs: \"\" + pathname + src.query + src.hash,\n        newUrl: \"\" + pathname + src.query + src.hash\n      });\n    }\n\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: redirectTarget\n    });\n  }\n\n  return Promise.resolve({\n    type: \"next\"\n  });\n}\n\nasync function withMiddlewareEffects(options) {\n  const matches = await matchesMiddleware(options);\n\n  if (!matches || !options.fetchData) {\n    return null;\n  }\n\n  try {\n    const data = await options.fetchData();\n    const effect = await getMiddlewareData(data.dataHref, data.response, options);\n    return {\n      dataHref: data.dataHref,\n      json: data.json,\n      response: data.response,\n      text: data.text,\n      cacheKey: data.cacheKey,\n      effect\n    };\n  } catch (e) {\n    /**\n    * TODO: Revisit this in the future.\n    * For now we will not consider middleware data errors to be fatal.\n    * maybe we should revisit in the future.\n    */\n    return null;\n  }\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol(\"SSG_DATA_NOT_FOUND\");\n\nfunction fetchRetry(url, attempts, options) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: \"same-origin\",\n    method: options.method || \"GET\",\n    headers: Object.assign({}, options.headers, {\n      \"x-nextjs-data\": \"1\"\n    })\n  }).then(response => {\n    return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;\n  });\n}\n\nfunction tryToParseAsJSON(text) {\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction fetchNextData(param) {\n  let {\n    dataHref,\n    inflightCache,\n    isPrefetch,\n    hasMiddleware,\n    isServerRender,\n    parseJSON,\n    persistCache,\n    isBackground,\n    unstable_skipClientCache\n  } = param;\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n\n  var _params_method;\n\n  const getData = params => {\n    return fetchRetry(dataHref, isServerRender ? 3 : 1, {\n      headers: Object.assign({}, isPrefetch ? {\n        purpose: \"prefetch\"\n      } : {}, isPrefetch && hasMiddleware ? {\n        \"x-middleware-prefetch\": \"1\"\n      } : {}),\n      method: (_params_method = params == null ? void 0 : params.method) != null ? _params_method : \"GET\"\n    }).then(response => {\n      if (response.ok && (params == null ? void 0 : params.method) === \"HEAD\") {\n        return {\n          dataHref,\n          response,\n          text: \"\",\n          json: {},\n          cacheKey\n        };\n      }\n\n      return response.text().then(text => {\n        if (!response.ok) {\n          /**\n          * When the data response is a redirect because of a middleware\n          * we do not consider it an error. The headers must bring the\n          * mapped location.\n          * TODO: Change the status code in the handler.\n          */\n          if (hasMiddleware && [301, 302, 307, 308].includes(response.status)) {\n            return {\n              dataHref,\n              response,\n              text,\n              json: {},\n              cacheKey\n            };\n          }\n\n          if (response.status === 404) {\n            var _tryToParseAsJSON;\n\n            if ((_tryToParseAsJSON = tryToParseAsJSON(text)) == null ? void 0 : _tryToParseAsJSON.notFound) {\n              return {\n                dataHref,\n                json: {\n                  notFound: SSG_DATA_NOT_FOUND\n                },\n                response,\n                text,\n                cacheKey\n              };\n            }\n          }\n\n          const error = new Error(\"Failed to load static props\");\n          /**\n          * We should only trigger a server-side transition if this was\n          * caused on a client-side transition. Otherwise, we'd get into\n          * an infinite loop.\n          */\n\n          if (!isServerRender) {\n            (0, _routeloader.markAssetError)(error);\n          }\n\n          throw error;\n        }\n\n        return {\n          dataHref,\n          json: parseJSON ? tryToParseAsJSON(text) : null,\n          response,\n          text,\n          cacheKey\n        };\n      });\n    }).then(data => {\n      if (!persistCache || true || 0) {\n        delete inflightCache[cacheKey];\n      }\n\n      return data;\n    }).catch(err => {\n      if (!unstable_skipClientCache) {\n        delete inflightCache[cacheKey];\n      }\n\n      if ( // chrome\n      err.message === \"Failed to fetch\" || // firefox\n      err.message === \"NetworkError when attempting to fetch resource.\" || // safari\n      err.message === \"Load failed\") {\n        (0, _routeloader.markAssetError)(err);\n      }\n\n      throw err;\n    });\n  }; // when skipping client cache we wait to update\n  // inflight cache until successful data response\n  // this allows racing click event with fetching newer data\n  // without blocking navigation when stale data is available\n\n\n  if (unstable_skipClientCache && persistCache) {\n    return getData({}).then(data => {\n      inflightCache[cacheKey] = Promise.resolve(data);\n      return data;\n    });\n  }\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = getData(isBackground ? {\n    method: \"HEAD\"\n  } : {});\n}\n\nfunction createKey() {\n  return Math.random().toString(36).slice(2, 10);\n}\n\nfunction handleHardNavigation(param) {\n  let {\n    url,\n    router\n  } = param; // ensure we don't trigger a hard navigation to the same\n  // URL as this can end up with an infinite refresh\n\n  if (url === (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(router.asPath, router.locale))) {\n    throw new Error(\"Invariant: attempted to hard navigate to the same URL \" + url + \" \" + location.href);\n  }\n\n  window.location.href = url;\n}\n\nconst getCancelledHandler = param => {\n  let {\n    route,\n    router\n  } = param;\n  let cancelled = false;\n\n  const cancel = router.clc = () => {\n    cancelled = true;\n  };\n\n  const handleCancelled = () => {\n    if (cancelled) {\n      const error = new Error('Abort fetching component for route: \"' + route + '\"');\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === router.clc) {\n      router.clc = null;\n    }\n  };\n\n  return handleCancelled;\n};\n\nclass Router {\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Go forward in history\n  */\n\n\n  forward() {\n    window.history.forward();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options) {\n    if (options === void 0) options = {};\n\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change(\"pushState\", url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options) {\n    if (options === void 0) options = {};\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change(\"replaceState\", url, as, options);\n  }\n\n  async _bfl(as, resolvedAs, locale, skipNavigate) {\n    if (true) {\n      let matchesBflStatic = false;\n      let matchesBflDynamic = false;\n\n      for (const curAs of [as, resolvedAs]) {\n        if (curAs) {\n          const asNoSlash = (0, _removetrailingslash.removeTrailingSlash)(new URL(curAs, \"http://n\").pathname);\n          const asNoSlashLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asNoSlash, locale || this.locale));\n\n          if (asNoSlash !== (0, _removetrailingslash.removeTrailingSlash)(new URL(this.asPath, \"http://n\").pathname)) {\n            var _this__bfl_s, _this__bfl_s1;\n\n            matchesBflStatic = matchesBflStatic || !!((_this__bfl_s = this._bfl_s) == null ? void 0 : _this__bfl_s.has(asNoSlash)) || !!((_this__bfl_s1 = this._bfl_s) == null ? void 0 : _this__bfl_s1.has(asNoSlashLocale));\n\n            for (const normalizedAS of [asNoSlash, asNoSlashLocale]) {\n              // if any sub-path of as matches a dynamic filter path\n              // it should be hard navigated\n              const curAsParts = normalizedAS.split(\"/\");\n\n              for (let i = 0; !matchesBflDynamic && i < curAsParts.length + 1; i++) {\n                var _this__bfl_d;\n\n                const currentPart = curAsParts.slice(0, i).join(\"/\");\n\n                if (currentPart && ((_this__bfl_d = this._bfl_d) == null ? void 0 : _this__bfl_d.has(currentPart))) {\n                  matchesBflDynamic = true;\n                  break;\n                }\n              }\n            } // if the client router filter is matched then we trigger\n            // a hard navigation\n\n\n            if (matchesBflStatic || matchesBflDynamic) {\n              if (skipNavigate) {\n                return true;\n              }\n\n              handleHardNavigation({\n                url: (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, locale || this.locale, this.defaultLocale)),\n                router: this\n              });\n              return new Promise(() => {});\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    var _this_components_pathname;\n\n    if (!(0, _islocalurl.isLocalURL)(url)) {\n      handleHardNavigation({\n        url,\n        router: this\n      });\n      return false;\n    } // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n\n    const isQueryUpdating = options._h === 1;\n\n    if (!isQueryUpdating && !options.shallow) {\n      await this._bfl(as, undefined, options.locale);\n    }\n\n    let shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsepath.parsePath)(url).pathname === (0, _parsepath.parsePath)(as).pathname;\n\n    const nextState = _objectSpread({}, this.state); // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n    // or a navigation has occurred\n\n\n    const readyStateChange = this.isReady !== true;\n    this.isReady = true;\n    const isSsr = this.isSsr;\n\n    if (!isQueryUpdating) {\n      this.isSsr = false;\n    } // if a route transition is already in progress before\n    // the query updating is triggered ignore query updating\n\n\n    if (isQueryUpdating && this.clc) {\n      return false;\n    }\n\n    const prevLocale = nextState.locale;\n\n    if (false) { var _this_locales; } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark(\"routeChange\");\n    }\n\n    const {\n      shallow = false,\n      scroll = true\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute && this.clc) {\n      if (!isSsr) {\n        Router.events.emit(\"routeChangeError\", buildCancellationError(), this._inFlightRoute, routeProps);\n      }\n\n      this.clc();\n      this.clc = null;\n    }\n\n    as = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = (0, _removelocale.removeLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, nextState.locale);\n    this._inFlightRoute = as;\n    const localeChange = prevLocale !== nextState.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    if (!isQueryUpdating && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      nextState.asPath = cleanedAs;\n      Router.events.emit(\"hashChangeStart\", as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, _objectSpread(_objectSpread({}, options), {}, {\n        scroll: false\n      }));\n\n      if (scroll) {\n        this.scrollToHash(cleanedAs);\n      }\n\n      try {\n        await this.set(nextState, this.components[nextState.route], null);\n      } catch (err) {\n        if ((0, _iserror.default)(err) && err.cancelled) {\n          Router.events.emit(\"routeChangeError\", err, cleanedAs, routeProps);\n        }\n\n        throw err;\n      }\n\n      Router.events.emit(\"hashChangeComplete\", as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n    let {\n      pathname,\n      query\n    } = parsed; // if we detected the path as app route during prefetching\n    // trigger hard navigation\n\n    if ((_this_components_pathname = this.components[pathname]) == null ? void 0 : _this_components_pathname.__appRouter) {\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      return new Promise(() => {});\n    } // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n\n    let pages, rewrites;\n\n    try {\n      [pages, {\n        __rewrites: rewrites\n      }] = await Promise.all([this.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)(), this.pageLoader.getMiddleware()]);\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = \"replaceState\";\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname = pathname ? (0, _removetrailingslash.removeTrailingSlash)((0, _removebasepath.removeBasePath)(pathname)) : pathname;\n    let route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    const parsedAsPathname = as.startsWith(\"/\") && (0, _parserelativeurl.parseRelativeUrl)(as).pathname;\n    const isMiddlewareRewrite = !!(parsedAsPathname && route !== parsedAsPathname && (!(0, _isdynamic.isDynamicRoute)(route) || !(0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(route))(parsedAsPathname))); // we don't attempt resolve asPath when we need to execute\n    // middleware as the resolving will occur server-side\n\n    const isMiddlewareMatch = !options.shallow && (await matchesMiddleware({\n      asPath: as,\n      locale: nextState.locale,\n      router: this\n    }));\n\n    if (isQueryUpdating && isMiddlewareMatch) {\n      shouldResolveHref = false;\n    }\n\n    if (shouldResolveHref && pathname !== \"/_error\") {\n      options._shouldResolveHref = true;\n\n      if (false) {} else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n\n          if (!isMiddlewareMatch) {\n            url = (0, _formaturl.formatWithValidation)(parsed);\n          }\n        }\n      }\n    }\n\n    if (!(0, _islocalurl.isLocalURL)(as)) {\n      if (true) {\n        throw new Error('Invalid href: \"' + url + '\" and as: \"' + as + '\", received relative href and external as' + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n      }\n\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      return false;\n    }\n\n    resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(resolvedAs), nextState.locale);\n    route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    let routeMatch = false;\n\n    if ((0, _isdynamic.isDynamicRoute)(route)) {\n      const parsedAs = (0, _parserelativeurl.parseRelativeUrl)(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeregex.getRouteRegex)(route);\n      routeMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? (0, _interpolateas.interpolateAs)(route, asPathname, query) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param] && !routeRegex.groups[param].optional);\n\n        if (missingParams.length > 0 && !isMiddlewareMatch) {\n          if (true) {\n            console.warn(\"\" + (shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\") + \" failed to manually provide \" + (\"the params: \" + missingParams.join(\", \") + \" in the `href`'s `query`\"));\n          }\n\n          throw new Error((shouldInterpolate ? \"The provided `href` (\" + url + \") value is missing query values (\" + missingParams.join(\", \") + \") to be interpolated properly. \" : \"The provided `as` value (\" + asPathname + \") is incompatible with the `href` value (\" + route + \"). \") + (\"Read more: https://nextjs.org/docs/messages/\" + (shouldInterpolate ? \"href-interpolation-failed\" : \"incompatible-href-as\")));\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _formaturl.formatWithValidation)(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: (0, _omit.omit)(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n\n    if (!isQueryUpdating) {\n      Router.events.emit(\"routeChangeStart\", as, routeProps);\n    }\n\n    const isErrorRoute = this.pathname === \"/404\" || this.pathname === \"/_error\";\n\n    try {\n      var _self___NEXT_DATA___props, _self___NEXT_DATA___props_pageProps, _routeInfo_props;\n\n      let routeInfo = await this.getRouteInfo({\n        route,\n        pathname,\n        query,\n        as,\n        resolvedAs,\n        routeProps,\n        locale: nextState.locale,\n        isPreview: nextState.isPreview,\n        hasMiddleware: isMiddlewareMatch,\n        unstable_skipClientCache: options.unstable_skipClientCache,\n        isQueryUpdating: isQueryUpdating && !this.isFallback,\n        isMiddlewareRewrite\n      });\n\n      if (!isQueryUpdating && !options.shallow) {\n        await this._bfl(as, \"resolvedAs\" in routeInfo ? routeInfo.resolvedAs : undefined, nextState.locale);\n      }\n\n      if (\"route\" in routeInfo && isMiddlewareMatch) {\n        pathname = routeInfo.route || route;\n        route = pathname;\n\n        if (!routeProps.shallow) {\n          query = Object.assign({}, routeInfo.query || {}, query);\n        }\n\n        const cleanedParsedPathname = (0, _hasbasepath.hasBasePath)(parsed.pathname) ? (0, _removebasepath.removeBasePath)(parsed.pathname) : parsed.pathname;\n\n        if (routeMatch && pathname !== cleanedParsedPathname) {\n          Object.keys(routeMatch).forEach(key => {\n            if (routeMatch && query[key] === routeMatch[key]) {\n              delete query[key];\n            }\n          });\n        }\n\n        if ((0, _isdynamic.isDynamicRoute)(pathname)) {\n          const prefixedAs = !routeProps.shallow && routeInfo.resolvedAs ? routeInfo.resolvedAs : (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(new URL(as, location.href).pathname, nextState.locale), true);\n          let rewriteAs = prefixedAs;\n\n          if ((0, _hasbasepath.hasBasePath)(rewriteAs)) {\n            rewriteAs = (0, _removebasepath.removeBasePath)(rewriteAs);\n          }\n\n          if (false) {}\n\n          const routeRegex = (0, _routeregex.getRouteRegex)(pathname);\n          const curRouteMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(new URL(rewriteAs, location.href).pathname);\n\n          if (curRouteMatch) {\n            Object.assign(query, curRouteMatch);\n          }\n        }\n      } // If the routeInfo brings a redirect we simply apply it.\n\n\n      if (\"type\" in routeInfo) {\n        if (routeInfo.type === \"redirect-internal\") {\n          return this.change(method, routeInfo.newUrl, routeInfo.newAs, options);\n        } else {\n          handleHardNavigation({\n            url: routeInfo.destination,\n            router: this\n          });\n          return new Promise(() => {});\n        }\n      }\n\n      const component = routeInfo.Component;\n\n      if (component && component.unstable_scriptLoader) {\n        const scripts = [].concat(component.unstable_scriptLoader());\n        scripts.forEach(script => {\n          (0, _script.handleClientScriptLoad)(script.props);\n        });\n      } // handle redirect on client-transition\n\n\n      if ((routeInfo.__N_SSG || routeInfo.__N_SSP) && routeInfo.props) {\n        if (routeInfo.props.pageProps && routeInfo.props.pageProps.__N_REDIRECT) {\n          // Use the destination from redirect without adding locale\n          options.locale = false;\n          const destination = routeInfo.props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith(\"/\") && routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n            const parsedHref = (0, _parserelativeurl.parseRelativeUrl)(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          handleHardNavigation({\n            url: destination,\n            router: this\n          });\n          return new Promise(() => {});\n        }\n\n        nextState.isPreview = !!routeInfo.props.__N_PREVIEW; // handle SSG data 404\n\n        if (routeInfo.props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent(\"/404\");\n            notFoundRoute = \"/404\";\n          } catch (_) {\n            notFoundRoute = \"/_error\";\n          }\n\n          routeInfo = await this.getRouteInfo({\n            route: notFoundRoute,\n            pathname: notFoundRoute,\n            query,\n            as,\n            resolvedAs,\n            routeProps: {\n              shallow: false\n            },\n            locale: nextState.locale,\n            isPreview: nextState.isPreview,\n            isNotFound: true\n          });\n\n          if (\"type\" in routeInfo) {\n            throw new Error(\"Unexpected middleware effect on /404\");\n          }\n        }\n      }\n\n      if (isQueryUpdating && this.pathname === \"/_error\" && ((_self___NEXT_DATA___props = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps = _self___NEXT_DATA___props.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps.statusCode) === 500 && ((_routeInfo_props = routeInfo.props) == null ? void 0 : _routeInfo_props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        routeInfo.props.pageProps.statusCode = 500;\n      }\n\n      var _routeInfo_route; // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && nextState.route === ((_routeInfo_route = routeInfo.route) != null ? _routeInfo_route : route);\n\n      var _options_scroll;\n\n      const shouldScroll = (_options_scroll = options.scroll) != null ? _options_scroll : !isQueryUpdating && !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      const upcomingScrollState = forcedScroll != null ? forcedScroll : resetScroll; // the new state that the router gonna set\n\n      const upcomingRouterState = _objectSpread(_objectSpread({}, nextState), {}, {\n        route,\n        pathname,\n        query,\n        asPath: cleanedAs,\n        isFallback: false\n      }); // When the page being rendered is the 404 page, we should only update the\n      // query parameters. Route changes here might add the basePath when it\n      // wasn't originally present. This is also why this block is before the\n      // below `changeState` call which updates the browser's history (changing\n      // the URL).\n\n\n      if (isQueryUpdating && isErrorRoute) {\n        var _self___NEXT_DATA___props1, _self___NEXT_DATA___props_pageProps1, _routeInfo_props1;\n\n        routeInfo = await this.getRouteInfo({\n          route: this.pathname,\n          pathname: this.pathname,\n          query,\n          as,\n          resolvedAs,\n          routeProps: {\n            shallow: false\n          },\n          locale: nextState.locale,\n          isPreview: nextState.isPreview,\n          isQueryUpdating: isQueryUpdating && !this.isFallback\n        });\n\n        if (\"type\" in routeInfo) {\n          throw new Error(\"Unexpected middleware effect on \" + this.pathname);\n        }\n\n        if (this.pathname === \"/_error\" && ((_self___NEXT_DATA___props1 = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps1 = _self___NEXT_DATA___props1.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps1.statusCode) === 500 && ((_routeInfo_props1 = routeInfo.props) == null ? void 0 : _routeInfo_props1.pageProps)) {\n          // ensure statusCode is still correct for static 500 page\n          // when updating query information\n          routeInfo.props.pageProps.statusCode = 500;\n        }\n\n        try {\n          await this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n        } catch (err) {\n          if ((0, _iserror.default)(err) && err.cancelled) {\n            Router.events.emit(\"routeChangeError\", err, cleanedAs, routeProps);\n          }\n\n          throw err;\n        }\n\n        return true;\n      }\n\n      Router.events.emit(\"beforeHistoryChange\", as, routeProps);\n      this.changeState(method, url, as, options); // for query updates we can skip it if the state is unchanged and we don't\n      // need to scroll\n      // https://github.com/vercel/next.js/issues/37139\n\n      const canSkipUpdating = isQueryUpdating && !upcomingScrollState && !readyStateChange && !localeChange && (0, _comparestates.compareRouterStates)(upcomingRouterState, this.state);\n\n      if (!canSkipUpdating) {\n        try {\n          await this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n        } catch (e) {\n          if (e.cancelled) routeInfo.error = routeInfo.error || e;else throw e;\n        }\n\n        if (routeInfo.error) {\n          if (!isQueryUpdating) {\n            Router.events.emit(\"routeChangeError\", routeInfo.error, cleanedAs, routeProps);\n          }\n\n          throw routeInfo.error;\n        }\n\n        if (false) {}\n\n        if (!isQueryUpdating) {\n          Router.events.emit(\"routeChangeComplete\", as, routeProps);\n        } // A hash mark # is the optional last part of a URL\n\n\n        const hashRegex = /#.+$/;\n\n        if (shouldScroll && hashRegex.test(as)) {\n          this.scrollToHash(as);\n        }\n      }\n\n      return true;\n    } catch (err) {\n      if ((0, _iserror.default)(err) && err.cancelled) {\n        return false;\n      }\n\n      throw err;\n    }\n  }\n\n  changeState(method, url, as, options) {\n    if (options === void 0) options = {};\n\n    if (true) {\n      if (typeof window.history === \"undefined\") {\n        console.error(\"Warning: window.history is not available.\");\n        return;\n      }\n\n      if (typeof window.history[method] === \"undefined\") {\n        console.error(\"Warning: window.history.\" + method + \" is not available\");\n        return;\n      }\n    }\n\n    if (method !== \"pushState\" || (0, _utils.getURL)() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        key: this._key = method !== \"pushState\" ? this._key : createKey()\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      \"\", as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    console.error(err);\n\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeloader.isAssetError)(err) || loadErrorFail) {\n      Router.events.emit(\"routeChangeError\", err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      handleHardNavigation({\n        url: as,\n        router: this\n      }); // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let props;\n      const {\n        page: Component,\n        styleSheets\n      } = await this.fetchComponent(\"/_error\");\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error(\"Error in error page `getInitialProps`: \", gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError((0, _iserror.default)(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + \"\"), pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(param) {\n    let {\n      route: requestedRoute,\n      pathname,\n      query,\n      as,\n      resolvedAs,\n      routeProps,\n      locale,\n      hasMiddleware,\n      isPreview,\n      unstable_skipClientCache,\n      isQueryUpdating,\n      isMiddlewareRewrite,\n      isNotFound\n    } = param;\n    /**\n    * This `route` binding can change if there's a rewrite\n    * so we keep a reference to the original requested route\n    * so we can store the cache for it and avoid re-requesting every time\n    * for shallow routing purposes.\n    */\n\n    let route = requestedRoute;\n\n    try {\n      var _data_effect, _data_effect1, _data_effect2, _data_response;\n\n      const handleCancelled = getCancelledHandler({\n        route,\n        router: this\n      });\n      let existingInfo = this.components[route];\n\n      if (routeProps.shallow && existingInfo && this.route === route) {\n        return existingInfo;\n      }\n\n      if (hasMiddleware) {\n        existingInfo = undefined;\n      }\n\n      let cachedRouteInfo = existingInfo && !(\"initial\" in existingInfo) && false ? 0 : undefined;\n      const isBackground = isQueryUpdating;\n      const fetchNextDataParams = {\n        dataHref: this.pageLoader.getDataHref({\n          href: (0, _formaturl.formatWithValidation)({\n            pathname,\n            query\n          }),\n          skipInterpolation: true,\n          asPath: isNotFound ? \"/404\" : resolvedAs,\n          locale\n        }),\n        hasMiddleware: true,\n        isServerRender: this.isSsr,\n        parseJSON: true,\n        inflightCache: isBackground ? this.sbc : this.sdc,\n        persistCache: !isPreview,\n        isPrefetch: false,\n        unstable_skipClientCache,\n        isBackground\n      };\n      let data = isQueryUpdating && !isMiddlewareRewrite ? null : await withMiddlewareEffects({\n        fetchData: () => fetchNextData(fetchNextDataParams),\n        asPath: isNotFound ? \"/404\" : resolvedAs,\n        locale: locale,\n        router: this\n      }).catch(err => {\n        // we don't hard error during query updating\n        // as it's un-necessary and doesn't need to be fatal\n        // unless it is a fallback route and the props can't\n        // be loaded\n        if (isQueryUpdating) {\n          return null;\n        }\n\n        throw err;\n      }); // when rendering error routes we don't apply middleware\n      // effects\n\n      if (data && (pathname === \"/_error\" || pathname === \"/404\")) {\n        data.effect = undefined;\n      }\n\n      if (isQueryUpdating) {\n        if (!data) {\n          data = {\n            json: self.__NEXT_DATA__.props\n          };\n        } else {\n          data.json = self.__NEXT_DATA__.props;\n        }\n      }\n\n      handleCancelled();\n\n      if ((data == null ? void 0 : (_data_effect = data.effect) == null ? void 0 : _data_effect.type) === \"redirect-internal\" || (data == null ? void 0 : (_data_effect1 = data.effect) == null ? void 0 : _data_effect1.type) === \"redirect-external\") {\n        return data.effect;\n      }\n\n      if ((data == null ? void 0 : (_data_effect2 = data.effect) == null ? void 0 : _data_effect2.type) === \"rewrite\") {\n        const resolvedRoute = (0, _removetrailingslash.removeTrailingSlash)(data.effect.resolvedHref);\n        const pages = await this.pageLoader.getPageList(); // during query updating the page must match although during\n        // client-transition a redirect that doesn't match a page\n        // can be returned and this should trigger a hard navigation\n        // which is valid for incremental migration\n\n        if (!isQueryUpdating || pages.includes(resolvedRoute)) {\n          route = resolvedRoute;\n          pathname = data.effect.resolvedHref;\n          query = _objectSpread(_objectSpread({}, query), data.effect.parsedAs.query);\n          resolvedAs = (0, _removebasepath.removeBasePath)((0, _normalizelocalepath.normalizeLocalePath)(data.effect.parsedAs.pathname, this.locales).pathname); // Check again the cache with the new destination.\n\n          existingInfo = this.components[route];\n\n          if (routeProps.shallow && existingInfo && this.route === route && !hasMiddleware) {\n            // If we have a match with the current route due to rewrite,\n            // we can copy the existing information to the rewritten one.\n            // Then, we return the information along with the matched route.\n            return _objectSpread(_objectSpread({}, existingInfo), {}, {\n              route\n            });\n          }\n        }\n      }\n\n      if ((0, _isapiroute.isAPIRoute)(route)) {\n        handleHardNavigation({\n          url: as,\n          router: this\n        });\n        return new Promise(() => {});\n      }\n\n      const routeInfo = cachedRouteInfo || (await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      })));\n\n      if (true) {\n        const {\n          isValidElementType\n        } = __webpack_require__(/*! next/dist/compiled/react-is */ \"./node_modules/next/dist/compiled/react-is/index.js\");\n\n        if (!isValidElementType(routeInfo.Component)) {\n          throw new Error('The default export is not a React Component in page: \"' + pathname + '\"');\n        }\n      }\n\n      const wasBailedPrefetch = data == null ? void 0 : (_data_response = data.response) == null ? void 0 : _data_response.headers.get(\"x-middleware-skip\");\n      const shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP; // For non-SSG prefetches that bailed before sending data\n      // we clear the cache to fetch full response\n\n      if (wasBailedPrefetch && (data == null ? void 0 : data.dataHref)) {\n        delete this.sdc[data.dataHref];\n      }\n\n      const {\n        props,\n        cacheKey\n      } = await this._getData(async () => {\n        if (shouldFetchData) {\n          if ((data == null ? void 0 : data.json) && !wasBailedPrefetch) {\n            return {\n              cacheKey: data.cacheKey,\n              props: data.json\n            };\n          }\n\n          const dataHref = (data == null ? void 0 : data.dataHref) ? data.dataHref : this.pageLoader.getDataHref({\n            href: (0, _formaturl.formatWithValidation)({\n              pathname,\n              query\n            }),\n            asPath: resolvedAs,\n            locale\n          });\n          const fetched = await fetchNextData({\n            dataHref,\n            isServerRender: this.isSsr,\n            parseJSON: true,\n            inflightCache: wasBailedPrefetch ? {} : this.sdc,\n            persistCache: !isPreview,\n            isPrefetch: false,\n            unstable_skipClientCache\n          });\n          return {\n            cacheKey: fetched.cacheKey,\n            props: fetched.json || {}\n          };\n        }\n\n        return {\n          headers: {},\n          props: await this.getInitialProps(routeInfo.Component, // we provide AppTree later so this needs to be `any`\n          {\n            pathname,\n            query,\n            asPath: as,\n            locale,\n            locales: this.locales,\n            defaultLocale: this.defaultLocale\n          })\n        };\n      }); // Only bust the data cache for SSP routes although\n      // middleware can skip cache per request with\n      // x-middleware-cache: no-cache as well\n\n      if (routeInfo.__N_SSP && fetchNextDataParams.dataHref && cacheKey) {\n        delete this.sdc[cacheKey];\n      } // we kick off a HEAD request in the background\n      // when a non-prefetch request is made to signal revalidation\n\n\n      if (!this.isPreview && routeInfo.__N_SSG && false && 0) {}\n\n      props.pageProps = Object.assign({}, props.pageProps);\n      routeInfo.props = props;\n      routeInfo.route = route;\n      routeInfo.query = query;\n      routeInfo.resolvedAs = resolvedAs;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError((0, _iserror.getProperError)(err), pathname, query, as, routeProps);\n    }\n  }\n\n  set(state, data, resetScroll) {\n    this.state = state;\n    return this.sub(data, this.components[\"/_app\"].Component, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split(\"#\");\n    const [newUrlNoHash, newHash] = as.split(\"#\"); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash = \"\"] = as.split(\"#\"); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === \"\" || hash === \"top\") {\n      (0, _handlesmoothscroll.handleSmoothScroll)(() => window.scrollTo(0, 0));\n      return;\n    } // Decode hash to make non-latin anchor works.\n\n\n    const rawHash = decodeURIComponent(hash); // First we check if the element by id is found\n\n    const idEl = document.getElementById(rawHash);\n\n    if (idEl) {\n      (0, _handlesmoothscroll.handleSmoothScroll)(() => idEl.scrollIntoView());\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(rawHash)[0];\n\n    if (nameEl) {\n      (0, _handlesmoothscroll.handleSmoothScroll)(() => nameEl.scrollIntoView());\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath, options) {\n    if (asPath === void 0) asPath = url;\n    if (options === void 0) options = {}; // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n    if (true) {\n      return;\n    }\n\n    if ( true && (0, _isbot.isBot)(window.navigator.userAgent)) {\n      // No prefetches for bots that render the link since they are typically navigating\n      // links via the equivalent of a hard navigation and hence never utilize these\n      // prefetches.\n      return;\n    }\n\n    let parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n    const urlPathname = parsed.pathname;\n    let {\n      pathname,\n      query\n    } = parsed;\n    const originalPathname = pathname;\n\n    if (false) {}\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n    const locale = typeof options.locale !== \"undefined\" ? options.locale || undefined : this.locale;\n    const isMiddlewareMatch = await matchesMiddleware({\n      asPath: asPath,\n      locale: locale,\n      router: this\n    });\n\n    if (false) {}\n\n    parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n    if ((0, _isdynamic.isDynamicRoute)(parsed.pathname)) {\n      pathname = parsed.pathname;\n      parsed.pathname = pathname;\n      Object.assign(query, (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(parsed.pathname))((0, _parsepath.parsePath)(asPath).pathname) || {});\n\n      if (!isMiddlewareMatch) {\n        url = (0, _formaturl.formatWithValidation)(parsed);\n      }\n    }\n\n    const data =  false ? 0 : await withMiddlewareEffects({\n      fetchData: () => fetchNextData({\n        dataHref: this.pageLoader.getDataHref({\n          href: (0, _formaturl.formatWithValidation)({\n            pathname: originalPathname,\n            query\n          }),\n          skipInterpolation: true,\n          asPath: resolvedAs,\n          locale\n        }),\n        hasMiddleware: true,\n        isServerRender: this.isSsr,\n        parseJSON: true,\n        inflightCache: this.sdc,\n        persistCache: !this.isPreview,\n        isPrefetch: true\n      }),\n      asPath: asPath,\n      locale: locale,\n      router: this\n    });\n    /**\n    * If there was a rewrite we apply the effects of the rewrite on the\n    * current parameters for the prefetch.\n    */\n\n    if ((data == null ? void 0 : data.effect.type) === \"rewrite\") {\n      parsed.pathname = data.effect.resolvedHref;\n      pathname = data.effect.resolvedHref;\n      query = _objectSpread(_objectSpread({}, query), data.effect.parsedAs.query);\n      resolvedAs = data.effect.parsedAs.pathname;\n      url = (0, _formaturl.formatWithValidation)(parsed);\n    }\n    /**\n    * If there is a redirect to an external destination then we don't have\n    * to prefetch content as it will be unused.\n    */\n\n\n    if ((data == null ? void 0 : data.effect.type) === \"redirect-external\") {\n      return;\n    }\n\n    const route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n\n    if (await this._bfl(asPath, resolvedAs, options.locale, true)) {\n      this.components[urlPathname] = {\n        __appRouter: true\n      };\n    }\n\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? fetchNextData({\n        dataHref: (data == null ? void 0 : data.json) ? data == null ? void 0 : data.dataHref : this.pageLoader.getDataHref({\n          href: url,\n          asPath: resolvedAs,\n          locale: locale\n        }),\n        isServerRender: false,\n        parseJSON: true,\n        inflightCache: this.sdc,\n        persistCache: !this.isPreview,\n        isPrefetch: true,\n        unstable_skipClientCache: options.unstable_skipClientCache || options.priority && !!true\n      }).then(() => false).catch(() => false) : false;\n    }), this.pageLoader[options.priority ? \"loadPage\" : \"prefetch\"](route)]);\n  }\n\n  async fetchComponent(route) {\n    const handleCancelled = getCancelledHandler({\n      route,\n      router: this\n    });\n\n    try {\n      const componentResult = await this.pageLoader.loadPage(route);\n      handleCancelled();\n      return componentResult;\n    } catch (err) {\n      handleCancelled();\n      throw err;\n    }\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error(\"Loading initial props cancelled\");\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getFlightData(dataHref) {\n    // Do not cache RSC flight response since it's not a static resource\n    return fetchNextData({\n      dataHref,\n      isServerRender: true,\n      parseJSON: false,\n      inflightCache: this.sdc,\n      persistCache: false,\n      isPrefetch: false\n    }).then(param => {\n      let {\n        text\n      } = param;\n      return {\n        data: text\n      };\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components[\"/_app\"];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  get route() {\n    return this.state.route;\n  }\n\n  get pathname() {\n    return this.state.pathname;\n  }\n\n  get query() {\n    return this.state.query;\n  }\n\n  get asPath() {\n    return this.state.asPath;\n  }\n\n  get locale() {\n    return this.state.locale;\n  }\n\n  get isFallback() {\n    return this.state.isFallback;\n  }\n\n  get isPreview() {\n    return this.state.isPreview;\n  }\n\n  constructor(pathname, query, as, _ref) {\n    let {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview\n    } = _ref;\n    // Server Data Cache (full data requests)\n    this.sdc = {}; // Server Background Cache (HEAD requests)\n\n    this.sbc = {};\n    this.isFirstPopStateEvent = true;\n    this._key = createKey();\n\n    this.onPopState = e => {\n      const {\n        isFirstPopStateEvent\n      } = this;\n      this.isFirstPopStateEvent = false;\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState(\"replaceState\", (0, _formaturl.formatWithValidation)({\n          pathname: (0, _addbasepath.addBasePath)(pathname),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      } // __NA is used to identify if the history entry can be handled by the app-router.\n\n\n      if (state.__NA) {\n        window.location.reload();\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      } // Safari fires popstateevent when reopening the browser.\n\n\n      if (isFirstPopStateEvent && this.locale === state.options.locale && state.as === this.asPath) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        key\n      } = state;\n\n      if (false) {}\n\n      this._key = key;\n      const {\n        pathname\n      } = (0, _parserelativeurl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === (0, _addbasepath.addBasePath)(this.asPath) && pathname === (0, _addbasepath.addBasePath)(this.pathname)) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change(\"replaceState\", url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n        // @ts-ignore internal value not exposed on types\n        _h: 0\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    const route = (0, _removetrailingslash.removeTrailingSlash)(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== \"/_error\") {\n      this.components[route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components[\"/_app\"] = {\n      Component: App,\n      styleSheets: []\n    };\n\n    if (true) {\n      const {\n        BloomFilter\n      } = __webpack_require__(/*! ../../lib/bloom-filter */ \"./node_modules/next/dist/shared/lib/bloom-filter/index.js\");\n\n      const staticFilterData = {\"bitset\":{\"size\":24,\"content\":\"gsYJ\"},\"hashes\":7,\"size\":20};\n      const dynamicFilterData = {\"bitset\":{\"size\":0,\"content\":\"\"},\"hashes\":null,\"size\":0};\n\n      if (staticFilterData == null ? void 0 : staticFilterData.hashes) {\n        this._bfl_s = new BloomFilter(staticFilterData.size, staticFilterData.hashes);\n\n        this._bfl_s.import(staticFilterData);\n      }\n\n      if (dynamicFilterData == null ? void 0 : dynamicFilterData.hashes) {\n        this._bfl_d = new BloomFilter(dynamicFilterData.size, dynamicFilterData.hashes);\n\n        this._bfl_d.import(dynamicFilterData);\n      }\n    } // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isdynamic.isDynamicRoute)(pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.basePath =  false || \"\";\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n\n    if (false) {}\n\n    this.state = {\n      route,\n      pathname,\n      query,\n      asPath: autoExportDynamic ? pathname : as,\n      isPreview: !!isPreview,\n      locale:  false ? 0 : undefined,\n      isFallback\n    };\n    this._initialMatchesMiddlewarePromise = Promise.resolve(false);\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (!as.startsWith(\"//\")) {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        const options = {\n          locale\n        };\n        const asPath = (0, _utils.getURL)();\n        this._initialMatchesMiddlewarePromise = matchesMiddleware({\n          router: this,\n          locale,\n          asPath\n        }).then(matches => {\n          options._shouldResolveHref = as !== pathname;\n          this.changeState(\"replaceState\", matches ? asPath : (0, _formaturl.formatWithValidation)({\n            pathname: (0, _addbasepath.addBasePath)(pathname),\n            query\n          }), asPath, options);\n          return matches;\n        });\n      }\n\n      window.addEventListener(\"popstate\", this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (false) {}\n    }\n  }\n\n}\n\n(() => {\n  Router.events = (0, _mitt.default)();\n})();\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3JvdXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOzs7Ozs7OztBQUNiQSw4Q0FBNkM7RUFDekNHLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBLE1BQU1DLENBQU47O0FBS0EsU0FBU0ksT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLEdBQXpCLEVBQThCO0VBQzFCLEtBQUksSUFBSUMsSUFBUixJQUFnQkQsR0FBaEIsRUFBb0JWLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQlEsTUFBdEIsRUFBOEJFLElBQTlCLEVBQW9DO0lBQ3BEQyxVQUFVLEVBQUUsSUFEd0M7SUFFcERDLEdBQUcsRUFBRUgsR0FBRyxDQUFDQyxJQUFEO0VBRjRDLENBQXBDO0FBSXZCOztBQUNESCxPQUFPLENBQUNOLE9BQUQsRUFBVTtFQUNiRyxPQUFPLEVBQUUsWUFBVztJQUNoQixPQUFPUyxNQUFQO0VBQ0gsQ0FIWTtFQUliUixpQkFBaUIsRUFBRSxZQUFXO0lBQzFCLE9BQU9BLGlCQUFQO0VBQ0gsQ0FOWTtFQU9iQyxTQUFTLEVBQUUsWUFBVztJQUNsQixPQUFPQSxTQUFQO0VBQ0g7QUFUWSxDQUFWLENBQVA7O0FBV0EsTUFBTVEsd0JBQXdCLEdBQUdDLG1CQUFPLENBQUMsNEdBQUQsQ0FBeEM7O0FBQ0EsTUFBTUMseUJBQXlCLEdBQUdELG1CQUFPLENBQUMsOEdBQUQsQ0FBekM7O0FBQ0EsTUFBTUUsb0JBQW9CLEdBQUdGLG1CQUFPLENBQUMsZ0hBQUQsQ0FBcEM7O0FBQ0EsTUFBTUcsWUFBWSxHQUFHSCxtQkFBTyxDQUFDLHFGQUFELENBQTVCOztBQUNBLE1BQU1JLE9BQU8sR0FBR0osbUJBQU8sQ0FBQyx5RUFBRCxDQUF2Qjs7QUFDQSxNQUFNSyxRQUFRLEdBQUcsYUFBY0oseUJBQXlCLENBQUNLLENBQTFCLENBQTRCTixtQkFBTyxDQUFDLHVFQUFELENBQW5DLENBQS9COztBQUNBLE1BQU1PLG9CQUFv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QjtRQUdBLE1BQU1QLE1BQU0sR0FBRyxDQUFDLEdBQUd0QyxNQUFNLENBQUNvVixNQUFYLEdBQWY7UUFDQSxLQUFLOEYsZ0NBQUwsR0FBd0N0YyxpQkFBaUIsQ0FBQztVQUN0RG9ELE1BQU0sRUFBRSxJQUQ4QztVQUV0RGEsTUFGc0Q7VUFHdERQO1FBSHNELENBQUQsQ0FBakIsQ0FJckNnRSxJQUpxQyxDQUkvQmEsT0FBRCxJQUFXO1VBQ2Z2RixPQUFPLENBQUMyTSxrQkFBUixHQUE2QjVLLEVBQUUsS0FBS3hCLFFBQXBDO1VBQ0EsS0FBS29PLFdBQUwsQ0FBaUIsY0FBakIsRUFBaUNwSixPQUFPLEdBQUc3RSxNQUFILEdBQVksQ0FBQyxHQUFHaEMsVUFBVSxDQUFDMk8sb0JBQWYsRUFBcUM7WUFDckY5TSxRQUFRLEVBQUUsQ0FBQyxHQUFHdkIsWUFBWSxDQUFDK0IsV0FBakIsRUFBOEJSLFFBQTlCLENBRDJFO1lBRXJGMkU7VUFGcUYsQ0FBckMsQ0FBcEQsRUFHSXhFLE1BSEosRUFHWVYsT0FIWjtVQUlBLE9BQU91RixPQUFQO1FBQ0gsQ0FYdUMsQ0FBeEM7TUFZSDs7TUFDRHVCLE1BQU0sQ0FBQ3lTLGdCQUFQLENBQXdCLFVBQXhCLEVBQW9DLEtBQUtyQixVQUF6QyxFQXZCK0IsQ0F3Qi9CO01BQ0E7O01BQ0EsSUFBSXhVLEtBQUosRUFBMkMsRUFJMUM7SUFDSjtFQUNKOztBQXp4Q1E7O0FBMnhDYixDQUFDLE1BQUk7RUFDRGxHLE1BQU0sQ0FBQzhRLE1BQVAsR0FBZ0IsQ0FBQyxHQUFHblEsS0FBSyxDQUFDcEIsT0FBVixHQUFoQjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci9yb3V0ZXIuanM/ODY4NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zb2xlXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgbWF0Y2hlc01pZGRsZXdhcmU6IG51bGwsXG4gICAgY3JlYXRlS2V5OiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGRlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUm91dGVyO1xuICAgIH0sXG4gICAgbWF0Y2hlc01pZGRsZXdhcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc01pZGRsZXdhcmU7XG4gICAgfSxcbiAgICBjcmVhdGVLZXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlS2V5O1xuICAgIH1cbn0pO1xuY29uc3QgX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0ID0gcmVxdWlyZShcIkBzd2MvaGVscGVycy9fL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdFwiKTtcbmNvbnN0IF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZFwiKTtcbmNvbnN0IF9yZW1vdmV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgX3JvdXRlbG9hZGVyID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yb3V0ZS1sb2FkZXJcIik7XG5jb25zdCBfc2NyaXB0ID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9zY3JpcHRcIik7XG5jb25zdCBfaXNlcnJvciA9IC8qI19fUFVSRV9fKi8gX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZC5fKHJlcXVpcmUoXCIuLi8uLi8uLi9saWIvaXMtZXJyb3JcIikpO1xuY29uc3QgX2Rlbm9ybWFsaXplcGFnZXBhdGggPSByZXF1aXJlKFwiLi4vcGFnZS1wYXRoL2Rlbm9ybWFsaXplLXBhZ2UtcGF0aFwiKTtcbmNvbnN0IF9ub3JtYWxpemVsb2NhbGVwYXRoID0gcmVxdWlyZShcIi4uL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoXCIpO1xuY29uc3QgX21pdHQgPSAvKiNfX1BVUkVfXyovIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5fKHJlcXVpcmUoXCIuLi9taXR0XCIpKTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IF9pc2R5bmFtaWMgPSByZXF1aXJlKFwiLi91dGlscy9pcy1keW5hbWljXCIpO1xuY29uc3QgX3BhcnNlcmVsYXRpdmV1cmwgPSByZXF1aXJlKFwiLi91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmxcIik7XG5jb25zdCBfcmVzb2x2ZXJld3JpdGVzID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwiLi91dGlscy9yZXNvbHZlLXJld3JpdGVzXCIpKTtcbmNvbnN0IF9yb3V0ZW1hdGNoZXIgPSByZXF1aXJlKFwiLi91dGlscy9yb3V0ZS1tYXRjaGVyXCIpO1xuY29uc3QgX3JvdXRlcmVnZXggPSByZXF1aXJlKFwiLi91dGlscy9yb3V0ZS1yZWdleFwiKTtcbmNvbnN0IF9mb3JtYXR1cmwgPSByZXF1aXJlKFwiLi91dGlscy9mb3JtYXQtdXJsXCIpO1xuY29uc3QgX2RldGVjdGRvbWFpbmxvY2FsZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jbGllbnQvZGV0ZWN0LWRvbWFpbi1sb2NhbGVcIik7XG5jb25zdCBfcGFyc2VwYXRoID0gcmVxdWlyZShcIi4vdXRpbHMvcGFyc2UtcGF0aFwiKTtcbmNvbnN0IF9hZGRsb2NhbGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2FkZC1sb2NhbGVcIik7XG5jb25zdCBfcmVtb3ZlbG9jYWxlID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yZW1vdmUtbG9jYWxlXCIpO1xuY29uc3QgX3JlbW92ZWJhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yZW1vdmUtYmFzZS1wYXRoXCIpO1xuY29uc3QgX2FkZGJhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9hZGQtYmFzZS1wYXRoXCIpO1xuY29uc3QgX2hhc2Jhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9oYXMtYmFzZS1wYXRoXCIpO1xuY29uc3QgX2lzYXBpcm91dGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vbGliL2lzLWFwaS1yb3V0ZVwiKTtcbmNvbnN0IF9nZXRuZXh0cGF0aG5hbWVpbmZvID0gcmVxdWlyZShcIi4vdXRpbHMvZ2V0LW5leHQtcGF0aG5hbWUtaW5mb1wiKTtcbmNvbnN0IF9mb3JtYXRuZXh0cGF0aG5hbWVpbmZvID0gcmVxdWlyZShcIi4vdXRpbHMvZm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mb1wiKTtcbmNvbnN0IF9jb21wYXJlc3RhdGVzID0gcmVxdWlyZShcIi4vdXRpbHMvY29tcGFyZS1zdGF0ZXNcIik7XG5jb25zdCBfaXNsb2NhbHVybCA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLWxvY2FsLXVybFwiKTtcbmNvbnN0IF9pc2JvdCA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLWJvdFwiKTtcbmNvbnN0IF9vbWl0ID0gcmVxdWlyZShcIi4vdXRpbHMvb21pdFwiKTtcbmNvbnN0IF9yZXNvbHZlaHJlZiA9IHJlcXVpcmUoXCIuL3V0aWxzL3Jlc29sdmUtaHJlZlwiKTtcbmNvbnN0IF9pbnRlcnBvbGF0ZWFzID0gcmVxdWlyZShcIi4vdXRpbHMvaW50ZXJwb2xhdGUtYXNcIik7XG5jb25zdCBfaGFuZGxlc21vb3Roc2Nyb2xsID0gcmVxdWlyZShcIi4vdXRpbHMvaGFuZGxlLXNtb290aC1zY3JvbGxcIik7XG5mdW5jdGlvbiBidWlsZENhbmNlbGxhdGlvbkVycm9yKCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihcIlJvdXRlIENhbmNlbGxlZFwiKSwge1xuICAgICAgICBjYW5jZWxsZWQ6IHRydWVcbiAgICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIG1hdGNoZXNNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBtYXRjaGVycyA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShvcHRpb25zLnJvdXRlci5wYWdlTG9hZGVyLmdldE1pZGRsZXdhcmUoKSk7XG4gICAgaWYgKCFtYXRjaGVycykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHsgcGF0aG5hbWU6IGFzUGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKG9wdGlvbnMuYXNQYXRoKTtcbiAgICAvLyByZW1vdmUgYmFzZVBhdGggZmlyc3Qgc2luY2UgcGF0aCBwcmVmaXggaGFzIHRvIGJlIGluIHRoZSBvcmRlciBvZiBgLyR7YmFzZVBhdGh9LyR7bG9jYWxlfWBcbiAgICBjb25zdCBjbGVhbmVkQXMgPSAoMCwgX2hhc2Jhc2VwYXRoLmhhc0Jhc2VQYXRoKShhc1BhdGhuYW1lKSA/ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzUGF0aG5hbWUpIDogYXNQYXRobmFtZTtcbiAgICBjb25zdCBhc1dpdGhCYXNlUGF0aEFuZExvY2FsZSA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkoY2xlYW5lZEFzLCBvcHRpb25zLmxvY2FsZSkpO1xuICAgIC8vIENoZWNrIG9ubHkgcGF0aCBtYXRjaCBvbiBjbGllbnQuIE1hdGNoaW5nIFwiaGFzXCIgc2hvdWxkIGJlIGRvbmUgb24gc2VydmVyXG4gICAgLy8gd2hlcmUgd2UgY2FuIGFjY2VzcyBtb3JlIGluZm8gc3VjaCBhcyBoZWFkZXJzLCBIdHRwT25seSBjb29raWUsIGV0Yy5cbiAgICByZXR1cm4gbWF0Y2hlcnMuc29tZSgobSk9Pm5ldyBSZWdFeHAobS5yZWdleHApLnRlc3QoYXNXaXRoQmFzZVBhdGhBbmRMb2NhbGUpKTtcbn1cbmZ1bmN0aW9uIHN0cmlwT3JpZ2luKHVybCkge1xuICAgIGNvbnN0IG9yaWdpbiA9ICgwLCBfdXRpbHMuZ2V0TG9jYXRpb25PcmlnaW4pKCk7XG4gICAgcmV0dXJuIHVybC5zdGFydHNXaXRoKG9yaWdpbikgPyB1cmwuc3Vic3RyaW5nKG9yaWdpbi5sZW5ndGgpIDogdXJsO1xufVxuZnVuY3Rpb24gcHJlcGFyZVVybEFzKHJvdXRlciwgdXJsLCBhcykge1xuICAgIC8vIElmIHVybCBhbmQgYXMgcHJvdmlkZWQgYXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uLFxuICAgIC8vIHdlJ2xsIGZvcm1hdCB0aGVtIGludG8gdGhlIHN0cmluZyB2ZXJzaW9uIGhlcmUuXG4gICAgbGV0IFtyZXNvbHZlZEhyZWYsIHJlc29sdmVkQXNdID0gKDAsIF9yZXNvbHZlaHJlZi5yZXNvbHZlSHJlZikocm91dGVyLCB1cmwsIHRydWUpO1xuICAgIGNvbnN0IG9yaWdpbiA9ICgwLCBfdXRpbHMuZ2V0TG9jYXRpb25PcmlnaW4pKCk7XG4gICAgY29uc3QgaHJlZldhc0Fic29sdXRlID0gcmVzb2x2ZWRIcmVmLnN0YXJ0c1dpdGgob3JpZ2luKTtcbiAgICBjb25zdCBhc1dhc0Fic29sdXRlID0gcmVzb2x2ZWRBcyAmJiByZXNvbHZlZEFzLnN0YXJ0c1dpdGgob3JpZ2luKTtcbiAgICByZXNvbHZlZEhyZWYgPSBzdHJpcE9yaWdpbihyZXNvbHZlZEhyZWYpO1xuICAgIHJlc29sdmVkQXMgPSByZXNvbHZlZEFzID8gc3RyaXBPcmlnaW4ocmVzb2x2ZWRBcykgOiByZXNvbHZlZEFzO1xuICAgIGNvbnN0IHByZXBhcmVkVXJsID0gaHJlZldhc0Fic29sdXRlID8gcmVzb2x2ZWRIcmVmIDogKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkocmVzb2x2ZWRIcmVmKTtcbiAgICBjb25zdCBwcmVwYXJlZEFzID0gYXMgPyBzdHJpcE9yaWdpbigoMCwgX3Jlc29sdmVocmVmLnJlc29sdmVIcmVmKShyb3V0ZXIsIGFzKSkgOiByZXNvbHZlZEFzIHx8IHJlc29sdmVkSHJlZjtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IHByZXBhcmVkVXJsLFxuICAgICAgICBhczogYXNXYXNBYnNvbHV0ZSA/IHByZXBhcmVkQXMgOiAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKShwcmVwYXJlZEFzKVxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY1JvdXRlKHBhdGhuYW1lLCBwYWdlcykge1xuICAgIGNvbnN0IGNsZWFuUGF0aG5hbWUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkoKDAsIF9kZW5vcm1hbGl6ZXBhZ2VwYXRoLmRlbm9ybWFsaXplUGFnZVBhdGgpKHBhdGhuYW1lKSk7XG4gICAgaWYgKGNsZWFuUGF0aG5hbWUgPT09IFwiLzQwNFwiIHx8IGNsZWFuUGF0aG5hbWUgPT09IFwiL19lcnJvclwiKSB7XG4gICAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICB9XG4gICAgLy8gaGFuZGxlIHJlc29sdmluZyBocmVmIGZvciBkeW5hbWljIHJvdXRlc1xuICAgIGlmICghcGFnZXMuaW5jbHVkZXMoY2xlYW5QYXRobmFtZSkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICAgICAgICBwYWdlcy5zb21lKChwYWdlKT0+e1xuICAgICAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShwYWdlKSAmJiAoMCwgX3JvdXRlcmVnZXguZ2V0Um91dGVSZWdleCkocGFnZSkucmUudGVzdChjbGVhblBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcGFnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xufVxuZnVuY3Rpb24gZ2V0TWlkZGxld2FyZURhdGEoc291cmNlLCByZXNwb25zZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG5leHRDb25maWcgPSB7XG4gICAgICAgIGJhc2VQYXRoOiBvcHRpb25zLnJvdXRlci5iYXNlUGF0aCxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgbG9jYWxlczogb3B0aW9ucy5yb3V0ZXIubG9jYWxlc1xuICAgICAgICB9LFxuICAgICAgICB0cmFpbGluZ1NsYXNoOiBCb29sZWFuKHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSClcbiAgICB9O1xuICAgIGNvbnN0IHJld3JpdGVIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIngtbmV4dGpzLXJld3JpdGVcIik7XG4gICAgbGV0IHJld3JpdGVUYXJnZXQgPSByZXdyaXRlSGVhZGVyIHx8IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC1uZXh0anMtbWF0Y2hlZC1wYXRoXCIpO1xuICAgIGNvbnN0IG1hdGNoZWRQYXRoID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LW1hdGNoZWQtcGF0aFwiKTtcbiAgICBpZiAobWF0Y2hlZFBhdGggJiYgIXJld3JpdGVUYXJnZXQgJiYgIW1hdGNoZWRQYXRoLmluY2x1ZGVzKFwiX19uZXh0X2RhdGFfY2F0Y2hhbGxcIikgJiYgIW1hdGNoZWRQYXRoLmluY2x1ZGVzKFwiL19lcnJvclwiKSAmJiAhbWF0Y2hlZFBhdGguaW5jbHVkZXMoXCIvNDA0XCIpKSB7XG4gICAgICAgIC8vIGxldmVyYWdlIHgtbWF0Y2hlZC1wYXRoIHRvIGRldGVjdCBuZXh0LmNvbmZpZy5qcyByZXdyaXRlc1xuICAgICAgICByZXdyaXRlVGFyZ2V0ID0gbWF0Y2hlZFBhdGg7XG4gICAgfVxuICAgIGlmIChyZXdyaXRlVGFyZ2V0KSB7XG4gICAgICAgIGlmIChyZXdyaXRlVGFyZ2V0LnN0YXJ0c1dpdGgoXCIvXCIpIHx8IHByb2Nlc3MuZW52Ll9fTkVYVF9FWFRFUk5BTF9NSURETEVXQVJFX1JFV1JJVEVfUkVTT0xWRSkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkUmV3cml0ZVRhcmdldCA9ICgwLCBfcGFyc2VyZWxhdGl2ZXVybC5wYXJzZVJlbGF0aXZlVXJsKShyZXdyaXRlVGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhuYW1lSW5mbyA9ICgwLCBfZ2V0bmV4dHBhdGhuYW1laW5mby5nZXROZXh0UGF0aG5hbWVJbmZvKShwYXJzZWRSZXdyaXRlVGFyZ2V0LnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgbmV4dENvbmZpZyxcbiAgICAgICAgICAgICAgICBwYXJzZURhdGE6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGZzUGF0aG5hbWUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWVJbmZvLnBhdGhuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yb3V0ZXIucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpLFxuICAgICAgICAgICAgICAgICgwLCBfcm91dGVsb2FkZXIuZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCkoKVxuICAgICAgICAgICAgXSkudGhlbigocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgbGV0IFtwYWdlcywgeyBfX3Jld3JpdGVzOiByZXdyaXRlcyAgfV0gPSBwYXJhbTtcbiAgICAgICAgICAgICAgICBsZXQgYXMgPSAoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKHBhdGhuYW1lSW5mby5wYXRobmFtZSwgcGF0aG5hbWVJbmZvLmxvY2FsZSk7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShhcykgfHwgIXJld3JpdGVIZWFkZXIgJiYgcGFnZXMuaW5jbHVkZXMoKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKCgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzKSwgb3B0aW9ucy5yb3V0ZXIubG9jYWxlcykucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNvdXJjZSA9ICgwLCBfZ2V0bmV4dHBhdGhuYW1laW5mby5nZXROZXh0UGF0aG5hbWVJbmZvKSgoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkoc291cmNlKS5wYXRobmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VEYXRhOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBhcyA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKHBhcnNlZFNvdXJjZS5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZFJld3JpdGVUYXJnZXQucGF0aG5hbWUgPSBhcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9IQVNfUkVXUklURVMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKDAsIF9yZXNvbHZlcmV3cml0ZXMuZGVmYXVsdCkoYXMsIHBhZ2VzLCByZXdyaXRlcywgcGFyc2VkUmV3cml0ZVRhcmdldC5xdWVyeSwgKHBhdGgpPT5yZXNvbHZlRHluYW1pY1JvdXRlKHBhdGgsIHBhZ2VzKSwgb3B0aW9ucy5yb3V0ZXIubG9jYWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubWF0Y2hlZFBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZFJld3JpdGVUYXJnZXQucGF0aG5hbWUgPSByZXN1bHQucGFyc2VkQXMucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcyA9IHBhcnNlZFJld3JpdGVUYXJnZXQucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhcnNlZFJld3JpdGVUYXJnZXQucXVlcnksIHJlc3VsdC5wYXJzZWRBcy5xdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFwYWdlcy5pbmNsdWRlcyhmc1BhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZFBhdGhuYW1lID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShmc1BhdGhuYW1lLCBwYWdlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZFBhdGhuYW1lICE9PSBmc1BhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmc1BhdGhuYW1lID0gcmVzb2x2ZWRQYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZEhyZWYgPSAhcGFnZXMuaW5jbHVkZXMoZnNQYXRobmFtZSkgPyByZXNvbHZlRHluYW1pY1JvdXRlKCgwLCBfbm9ybWFsaXplbG9jYWxlcGF0aC5ub3JtYWxpemVMb2NhbGVQYXRoKSgoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShwYXJzZWRSZXdyaXRlVGFyZ2V0LnBhdGhuYW1lKSwgb3B0aW9ucy5yb3V0ZXIubG9jYWxlcykucGF0aG5hbWUsIHBhZ2VzKSA6IGZzUGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShyZXNvbHZlZEhyZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSAoMCwgX3JvdXRlbWF0Y2hlci5nZXRSb3V0ZU1hdGNoZXIpKCgwLCBfcm91dGVyZWdleC5nZXRSb3V0ZVJlZ2V4KShyZXNvbHZlZEhyZWYpKShhcyk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyc2VkUmV3cml0ZVRhcmdldC5xdWVyeSwgbWF0Y2hlcyB8fCB7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmV3cml0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRBczogcGFyc2VkUmV3cml0ZVRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRIcmVmXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNyYyA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkoc291cmNlKTtcbiAgICAgICAgY29uc3QgcGF0aG5hbWUgPSAoMCwgX2Zvcm1hdG5leHRwYXRobmFtZWluZm8uZm9ybWF0TmV4dFBhdGhuYW1lSW5mbykoe1xuICAgICAgICAgICAgLi4uKDAsIF9nZXRuZXh0cGF0aG5hbWVpbmZvLmdldE5leHRQYXRobmFtZUluZm8pKHNyYy5wYXRobmFtZSwge1xuICAgICAgICAgICAgICAgIG5leHRDb25maWcsXG4gICAgICAgICAgICAgICAgcGFyc2VEYXRhOiB0cnVlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGU6IG9wdGlvbnMucm91dGVyLmRlZmF1bHRMb2NhbGUsXG4gICAgICAgICAgICBidWlsZElkOiBcIlwiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHR5cGU6IFwicmVkaXJlY3QtZXh0ZXJuYWxcIixcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBcIlwiICsgcGF0aG5hbWUgKyBzcmMucXVlcnkgKyBzcmMuaGFzaFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmVkaXJlY3RUYXJnZXQgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIngtbmV4dGpzLXJlZGlyZWN0XCIpO1xuICAgIGlmIChyZWRpcmVjdFRhcmdldCkge1xuICAgICAgICBpZiAocmVkaXJlY3RUYXJnZXQuc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocmVkaXJlY3RUYXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgcGF0aG5hbWUgPSAoMCwgX2Zvcm1hdG5leHRwYXRobmFtZWluZm8uZm9ybWF0TmV4dFBhdGhuYW1lSW5mbykoe1xuICAgICAgICAgICAgICAgIC4uLigwLCBfZ2V0bmV4dHBhdGhuYW1laW5mby5nZXROZXh0UGF0aG5hbWVJbmZvKShzcmMucGF0aG5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VEYXRhOiB0cnVlXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZTogb3B0aW9ucy5yb3V0ZXIuZGVmYXVsdExvY2FsZSxcbiAgICAgICAgICAgICAgICBidWlsZElkOiBcIlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicmVkaXJlY3QtaW50ZXJuYWxcIixcbiAgICAgICAgICAgICAgICBuZXdBczogXCJcIiArIHBhdGhuYW1lICsgc3JjLnF1ZXJ5ICsgc3JjLmhhc2gsXG4gICAgICAgICAgICAgICAgbmV3VXJsOiBcIlwiICsgcGF0aG5hbWUgKyBzcmMucXVlcnkgKyBzcmMuaGFzaFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICB0eXBlOiBcInJlZGlyZWN0LWV4dGVybmFsXCIsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbjogcmVkaXJlY3RUYXJnZXRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB0eXBlOiBcIm5leHRcIlxuICAgIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gd2l0aE1pZGRsZXdhcmVFZmZlY3RzKG9wdGlvbnMpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gYXdhaXQgbWF0Y2hlc01pZGRsZXdhcmUob3B0aW9ucyk7XG4gICAgaWYgKCFtYXRjaGVzIHx8ICFvcHRpb25zLmZldGNoRGF0YSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IG9wdGlvbnMuZmV0Y2hEYXRhKCk7XG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IGF3YWl0IGdldE1pZGRsZXdhcmVEYXRhKGRhdGEuZGF0YUhyZWYsIGRhdGEucmVzcG9uc2UsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUhyZWY6IGRhdGEuZGF0YUhyZWYsXG4gICAgICAgICAgICBqc29uOiBkYXRhLmpzb24sXG4gICAgICAgICAgICByZXNwb25zZTogZGF0YS5yZXNwb25zZSxcbiAgICAgICAgICAgIHRleHQ6IGRhdGEudGV4dCxcbiAgICAgICAgICAgIGNhY2hlS2V5OiBkYXRhLmNhY2hlS2V5LFxuICAgICAgICAgICAgZWZmZWN0XG4gICAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvKipcbiAgICAgKiBUT0RPOiBSZXZpc2l0IHRoaXMgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKiBGb3Igbm93IHdlIHdpbGwgbm90IGNvbnNpZGVyIG1pZGRsZXdhcmUgZGF0YSBlcnJvcnMgdG8gYmUgZmF0YWwuXG4gICAgICogbWF5YmUgd2Ugc2hvdWxkIHJldmlzaXQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKi8gcmV0dXJuIG51bGw7XG4gICAgfVxufVxuY29uc3QgbWFudWFsU2Nyb2xsUmVzdG9yYXRpb24gPSBwcm9jZXNzLmVudi5fX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OICYmIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgXCJzY3JvbGxSZXN0b3JhdGlvblwiIGluIHdpbmRvdy5oaXN0b3J5ICYmICEhZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHYgPSBcIl9fbmV4dFwiO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VxdWVuY2VzXG4gICAgICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHYsIHYpLCBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHYpLCB0cnVlO1xuICAgIH0gY2F0Y2ggKG4pIHt9XG59KCk7XG5jb25zdCBTU0dfREFUQV9OT1RfRk9VTkQgPSBTeW1ib2woXCJTU0dfREFUQV9OT1RfRk9VTkRcIik7XG5mdW5jdGlvbiBmZXRjaFJldHJ5KHVybCwgYXR0ZW1wdHMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICAgIC8vIENvb2tpZXMgYXJlIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQgZm9yIE5leHQuanMnIFNTRyBcIlByZXZpZXcgTW9kZVwiLlxuICAgICAgICAvLyBDb29raWVzIG1heSBhbHNvIGJlIHJlcXVpcmVkIGZvciBgZ2V0U2VydmVyU2lkZVByb3BzYC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gPiBgZmV0Y2hgIHdvbuKAmXQgc2VuZCBjb29raWVzLCB1bmxlc3MgeW91IHNldCB0aGUgY3JlZGVudGlhbHMgaW5pdFxuICAgICAgICAvLyA+IG9wdGlvbi5cbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSS9Vc2luZ19GZXRjaFxuICAgICAgICAvL1xuICAgICAgICAvLyA+IEZvciBtYXhpbXVtIGJyb3dzZXIgY29tcGF0aWJpbGl0eSB3aGVuIGl0IGNvbWVzIHRvIHNlbmRpbmcgJlxuICAgICAgICAvLyA+IHJlY2VpdmluZyBjb29raWVzLCBhbHdheXMgc3VwcGx5IHRoZSBgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbidgXG4gICAgICAgIC8vID4gb3B0aW9uIGluc3RlYWQgb2YgcmVseWluZyBvbiB0aGUgZGVmYXVsdC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9mZXRjaCNjYXZlYXRzXG4gICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgICAgIG1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIixcbiAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5oZWFkZXJzLCB7XG4gICAgICAgICAgICBcIngtbmV4dGpzLWRhdGFcIjogXCIxXCJcbiAgICAgICAgfSlcbiAgICB9KS50aGVuKChyZXNwb25zZSk9PntcbiAgICAgICAgcmV0dXJuICFyZXNwb25zZS5vayAmJiBhdHRlbXB0cyA+IDEgJiYgcmVzcG9uc2Uuc3RhdHVzID49IDUwMCA/IGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cyAtIDEsIG9wdGlvbnMpIDogcmVzcG9uc2U7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0cnlUb1BhcnNlQXNKU09OKHRleHQpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiBmZXRjaE5leHREYXRhKHBhcmFtKSB7XG4gICAgbGV0IHsgZGF0YUhyZWYgLCBpbmZsaWdodENhY2hlICwgaXNQcmVmZXRjaCAsIGhhc01pZGRsZXdhcmUgLCBpc1NlcnZlclJlbmRlciAsIHBhcnNlSlNPTiAsIHBlcnNpc3RDYWNoZSAsIGlzQmFja2dyb3VuZCAsIHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSAgfSA9IHBhcmFtO1xuICAgIGNvbnN0IHsgaHJlZjogY2FjaGVLZXkgIH0gPSBuZXcgVVJMKGRhdGFIcmVmLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgdmFyIF9wYXJhbXNfbWV0aG9kO1xuICAgIGNvbnN0IGdldERhdGEgPSAocGFyYW1zKT0+e1xuICAgICAgICByZXR1cm4gZmV0Y2hSZXRyeShkYXRhSHJlZiwgaXNTZXJ2ZXJSZW5kZXIgPyAzIDogMSwge1xuICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgaXNQcmVmZXRjaCA/IHtcbiAgICAgICAgICAgICAgICBwdXJwb3NlOiBcInByZWZldGNoXCJcbiAgICAgICAgICAgIH0gOiB7fSwgaXNQcmVmZXRjaCAmJiBoYXNNaWRkbGV3YXJlID8ge1xuICAgICAgICAgICAgICAgIFwieC1taWRkbGV3YXJlLXByZWZldGNoXCI6IFwiMVwiXG4gICAgICAgICAgICB9IDoge30pLFxuICAgICAgICAgICAgbWV0aG9kOiAoX3BhcmFtc19tZXRob2QgPSBwYXJhbXMgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmFtcy5tZXRob2QpICE9IG51bGwgPyBfcGFyYW1zX21ldGhvZCA6IFwiR0VUXCJcbiAgICAgICAgfSkudGhlbigocmVzcG9uc2UpPT57XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2sgJiYgKHBhcmFtcyA9PSBudWxsID8gdm9pZCAwIDogcGFyYW1zLm1ldGhvZCkgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUhyZWYsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBqc29uOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVLZXlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKS50aGVuKCh0ZXh0KT0+e1xuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGVuIHRoZSBkYXRhIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QgYmVjYXVzZSBvZiBhIG1pZGRsZXdhcmVcbiAgICAgICAgICAgICAqIHdlIGRvIG5vdCBjb25zaWRlciBpdCBhbiBlcnJvci4gVGhlIGhlYWRlcnMgbXVzdCBicmluZyB0aGVcbiAgICAgICAgICAgICAqIG1hcHBlZCBsb2NhdGlvbi5cbiAgICAgICAgICAgICAqIFRPRE86IENoYW5nZSB0aGUgc3RhdHVzIGNvZGUgaW4gdGhlIGhhbmRsZXIuXG4gICAgICAgICAgICAgKi8gaWYgKGhhc01pZGRsZXdhcmUgJiYgW1xuICAgICAgICAgICAgICAgICAgICAgICAgMzAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgMzAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgMzA3LFxuICAgICAgICAgICAgICAgICAgICAgICAgMzA4XG4gICAgICAgICAgICAgICAgICAgIF0uaW5jbHVkZXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhSHJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb246IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlS2V5XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90cnlUb1BhcnNlQXNKU09OO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChfdHJ5VG9QYXJzZUFzSlNPTiA9IHRyeVRvUGFyc2VBc0pTT04odGV4dCkpID09IG51bGwgPyB2b2lkIDAgOiBfdHJ5VG9QYXJzZUFzSlNPTi5ub3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFIcmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RGb3VuZDogU1NHX0RBVEFfTk9UX0ZPVU5EXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBzdGF0aWMgcHJvcHNcIik7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2Ugc2hvdWxkIG9ubHkgdHJpZ2dlciBhIHNlcnZlci1zaWRlIHRyYW5zaXRpb24gaWYgdGhpcyB3YXNcbiAgICAgICAgICAgICAqIGNhdXNlZCBvbiBhIGNsaWVudC1zaWRlIHRyYW5zaXRpb24uIE90aGVyd2lzZSwgd2UnZCBnZXQgaW50b1xuICAgICAgICAgICAgICogYW4gaW5maW5pdGUgbG9vcC5cbiAgICAgICAgICAgICAqLyBpZiAoIWlzU2VydmVyUmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3JvdXRlbG9hZGVyLm1hcmtBc3NldEVycm9yKShlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFIcmVmLFxuICAgICAgICAgICAgICAgICAgICBqc29uOiBwYXJzZUpTT04gPyB0cnlUb1BhcnNlQXNKU09OKHRleHQpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlS2V5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS50aGVuKChkYXRhKT0+e1xuICAgICAgICAgICAgaWYgKCFwZXJzaXN0Q2FjaGUgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiIHx8IGRhdGEucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LW1pZGRsZXdhcmUtY2FjaGVcIikgPT09IFwibm8tY2FjaGVcIikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpbmZsaWdodENhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKT0+e1xuICAgICAgICAgICAgaWYgKCF1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGUpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaW5mbGlnaHRDYWNoZVtjYWNoZUtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoLy8gY2hyb21lXG4gICAgICAgICAgICBlcnIubWVzc2FnZSA9PT0gXCJGYWlsZWQgdG8gZmV0Y2hcIiB8fCAvLyBmaXJlZm94XG4gICAgICAgICAgICBlcnIubWVzc2FnZSA9PT0gXCJOZXR3b3JrRXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGZldGNoIHJlc291cmNlLlwiIHx8IC8vIHNhZmFyaVxuICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT09IFwiTG9hZCBmYWlsZWRcIikge1xuICAgICAgICAgICAgICAgICgwLCBfcm91dGVsb2FkZXIubWFya0Fzc2V0RXJyb3IpKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gd2hlbiBza2lwcGluZyBjbGllbnQgY2FjaGUgd2Ugd2FpdCB0byB1cGRhdGVcbiAgICAvLyBpbmZsaWdodCBjYWNoZSB1bnRpbCBzdWNjZXNzZnVsIGRhdGEgcmVzcG9uc2VcbiAgICAvLyB0aGlzIGFsbG93cyByYWNpbmcgY2xpY2sgZXZlbnQgd2l0aCBmZXRjaGluZyBuZXdlciBkYXRhXG4gICAgLy8gd2l0aG91dCBibG9ja2luZyBuYXZpZ2F0aW9uIHdoZW4gc3RhbGUgZGF0YSBpcyBhdmFpbGFibGVcbiAgICBpZiAodW5zdGFibGVfc2tpcENsaWVudENhY2hlICYmIHBlcnNpc3RDYWNoZSkge1xuICAgICAgICByZXR1cm4gZ2V0RGF0YSh7fSkudGhlbigoZGF0YSk9PntcbiAgICAgICAgICAgIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldID0gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5mbGlnaHRDYWNoZVtjYWNoZUtleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaW5mbGlnaHRDYWNoZVtjYWNoZUtleV07XG4gICAgfVxuICAgIHJldHVybiBpbmZsaWdodENhY2hlW2NhY2hlS2V5XSA9IGdldERhdGEoaXNCYWNrZ3JvdW5kID8ge1xuICAgICAgICBtZXRob2Q6IFwiSEVBRFwiXG4gICAgfSA6IHt9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiwgMTApO1xufVxuZnVuY3Rpb24gaGFuZGxlSGFyZE5hdmlnYXRpb24ocGFyYW0pIHtcbiAgICBsZXQgeyB1cmwgLCByb3V0ZXIgIH0gPSBwYXJhbTtcbiAgICAvLyBlbnN1cmUgd2UgZG9uJ3QgdHJpZ2dlciBhIGhhcmQgbmF2aWdhdGlvbiB0byB0aGUgc2FtZVxuICAgIC8vIFVSTCBhcyB0aGlzIGNhbiBlbmQgdXAgd2l0aCBhbiBpbmZpbml0ZSByZWZyZXNoXG4gICAgaWYgKHVybCA9PT0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkoKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShyb3V0ZXIuYXNQYXRoLCByb3V0ZXIubG9jYWxlKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiBhdHRlbXB0ZWQgdG8gaGFyZCBuYXZpZ2F0ZSB0byB0aGUgc2FtZSBVUkwgXCIgKyB1cmwgKyBcIiBcIiArIGxvY2F0aW9uLmhyZWYpO1xuICAgIH1cbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbn1cbmNvbnN0IGdldENhbmNlbGxlZEhhbmRsZXIgPSAocGFyYW0pPT57XG4gICAgbGV0IHsgcm91dGUgLCByb3V0ZXIgIH0gPSBwYXJhbTtcbiAgICBsZXQgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgY29uc3QgY2FuY2VsID0gcm91dGVyLmNsYyA9ICgpPT57XG4gICAgICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDYW5jZWxsZWQgPSAoKT0+e1xuICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignQWJvcnQgZmV0Y2hpbmcgY29tcG9uZW50IGZvciByb3V0ZTogXCInICsgcm91dGUgKyAnXCInKTtcbiAgICAgICAgICAgIGVycm9yLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FuY2VsID09PSByb3V0ZXIuY2xjKSB7XG4gICAgICAgICAgICByb3V0ZXIuY2xjID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUNhbmNlbGxlZDtcbn07XG5jbGFzcyBSb3V0ZXIge1xuICAgIHJlbG9hZCgpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICogR28gYmFjayBpbiBoaXN0b3J5XG4gICAqLyBiYWNrKCkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBHbyBmb3J3YXJkIGluIGhpc3RvcnlcbiAgICovIGZvcndhcmQoKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LmZvcndhcmQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFBlcmZvcm1zIGEgYHB1c2hTdGF0ZWAgd2l0aCBhcmd1bWVudHNcbiAgICogQHBhcmFtIHVybCBvZiB0aGUgcm91dGVcbiAgICogQHBhcmFtIGFzIG1hc2tzIGB1cmxgIGZvciB0aGUgYnJvd3NlclxuICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgeW91IGNhbiBkZWZpbmUgYHNoYWxsb3dgIGFuZCBvdGhlciBvcHRpb25zXG4gICAqLyBwdXNoKHVybCwgYXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTikge1xuICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGluIHRoZSBmdXR1cmUgd2hlbiB3ZSB1cGRhdGUgaGlzdG9yeSBiZWZvcmUgcm91dGUgY2hhbmdlXG4gICAgICAgICAgICAvLyBpcyBjb21wbGV0ZSwgYXMgdGhlIHBvcHN0YXRlIGV2ZW50IHNob3VsZCBoYW5kbGUgdGhpcyBjYXB0dXJlLlxuICAgICAgICAgICAgaWYgKG1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU25hcHNob3Qgc2Nyb2xsIHBvc2l0aW9uIHJpZ2h0IGJlZm9yZSBuYXZpZ2F0aW5nIHRvIGEgbmV3IHBhZ2U6XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJfX25leHRfc2Nyb2xsX1wiICsgdGhpcy5fa2V5LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBzZWxmLnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogc2VsZi5wYWdlWU9mZnNldFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAoeyB1cmwgLCBhcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCB1cmwsIGFzKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZShcInB1c2hTdGF0ZVwiLCB1cmwsIGFzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFBlcmZvcm1zIGEgYHJlcGxhY2VTdGF0ZWAgd2l0aCBhcmd1bWVudHNcbiAgICogQHBhcmFtIHVybCBvZiB0aGUgcm91dGVcbiAgICogQHBhcmFtIGFzIG1hc2tzIGB1cmxgIGZvciB0aGUgYnJvd3NlclxuICAgKiBAcGFyYW0gb3B0aW9ucyBvYmplY3QgeW91IGNhbiBkZWZpbmUgYHNoYWxsb3dgIGFuZCBvdGhlciBvcHRpb25zXG4gICAqLyByZXBsYWNlKHVybCwgYXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgb3B0aW9ucyA9IHt9O1xuICAgICAgICAoeyB1cmwgLCBhcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCB1cmwsIGFzKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5nZShcInJlcGxhY2VTdGF0ZVwiLCB1cmwsIGFzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgX2JmbChhcywgcmVzb2x2ZWRBcywgbG9jYWxlLCBza2lwTmF2aWdhdGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9DTElFTlRfUk9VVEVSX0ZJTFRFUl9FTkFCTEVEKSB7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlc0JmbFN0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IG1hdGNoZXNCZmxEeW5hbWljID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGN1ckFzIG9mIFtcbiAgICAgICAgICAgICAgICBhcyxcbiAgICAgICAgICAgICAgICByZXNvbHZlZEFzXG4gICAgICAgICAgICBdKXtcbiAgICAgICAgICAgICAgICBpZiAoY3VyQXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNOb1NsYXNoID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKG5ldyBVUkwoY3VyQXMsIFwiaHR0cDovL25cIikucGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc05vU2xhc2hMb2NhbGUgPSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKGFzTm9TbGFzaCwgbG9jYWxlIHx8IHRoaXMubG9jYWxlKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhc05vU2xhc2ggIT09ICgwLCBfcmVtb3ZldHJhaWxpbmdzbGFzaC5yZW1vdmVUcmFpbGluZ1NsYXNoKShuZXcgVVJMKHRoaXMuYXNQYXRoLCBcImh0dHA6Ly9uXCIpLnBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzX19iZmxfcywgX3RoaXNfX2JmbF9zMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXNCZmxTdGF0aWMgPSBtYXRjaGVzQmZsU3RhdGljIHx8ICEhKChfdGhpc19fYmZsX3MgPSB0aGlzLl9iZmxfcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzX19iZmxfcy5oYXMoYXNOb1NsYXNoKSkgfHwgISEoKF90aGlzX19iZmxfczEgPSB0aGlzLl9iZmxfcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzX19iZmxfczEuaGFzKGFzTm9TbGFzaExvY2FsZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBub3JtYWxpemVkQVMgb2YgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTm9TbGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc05vU2xhc2hMb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGFueSBzdWItcGF0aCBvZiBhcyBtYXRjaGVzIGEgZHluYW1pYyBmaWx0ZXIgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHNob3VsZCBiZSBoYXJkIG5hdmlnYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ckFzUGFydHMgPSBub3JtYWxpemVkQVMuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7ICFtYXRjaGVzQmZsRHluYW1pYyAmJiBpIDwgY3VyQXNQYXJ0cy5sZW5ndGggKyAxOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXNfX2JmbF9kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UGFydCA9IGN1ckFzUGFydHMuc2xpY2UoMCwgaSkuam9pbihcIi9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFydCAmJiAoKF90aGlzX19iZmxfZCA9IHRoaXMuX2JmbF9kKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXNfX2JmbF9kLmhhcyhjdXJyZW50UGFydCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzQmZsRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjbGllbnQgcm91dGVyIGZpbHRlciBpcyBtYXRjaGVkIHRoZW4gd2UgdHJpZ2dlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBoYXJkIG5hdmlnYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzQmZsU3RhdGljIHx8IG1hdGNoZXNCZmxEeW5hbWljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraXBOYXZpZ2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkoYXMsIGxvY2FsZSB8fCB0aGlzLmxvY2FsZSwgdGhpcy5kZWZhdWx0TG9jYWxlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXN5bmMgY2hhbmdlKG1ldGhvZCwgdXJsLCBhcywgb3B0aW9ucywgZm9yY2VkU2Nyb2xsKSB7XG4gICAgICAgIHZhciBfdGhpc19jb21wb25lbnRzX3BhdGhuYW1lO1xuICAgICAgICBpZiAoISgwLCBfaXNsb2NhbHVybC5pc0xvY2FsVVJMKSh1cmwpKSB7XG4gICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV0FSTklORzogYF9oYCBpcyBhbiBpbnRlcm5hbCBvcHRpb24gZm9yIGhhbmRpbmcgTmV4dC5qcyBjbGllbnQtc2lkZVxuICAgICAgICAvLyBoeWRyYXRpb24uIFlvdXIgYXBwIHNob3VsZCBfbmV2ZXJfIHVzZSB0aGlzIHByb3BlcnR5LiBJdCBtYXkgY2hhbmdlIGF0XG4gICAgICAgIC8vIGFueSB0aW1lIHdpdGhvdXQgbm90aWNlLlxuICAgICAgICBjb25zdCBpc1F1ZXJ5VXBkYXRpbmcgPSBvcHRpb25zLl9oID09PSAxO1xuICAgICAgICBpZiAoIWlzUXVlcnlVcGRhdGluZyAmJiAhb3B0aW9ucy5zaGFsbG93KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9iZmwoYXMsIHVuZGVmaW5lZCwgb3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaG91bGRSZXNvbHZlSHJlZiA9IGlzUXVlcnlVcGRhdGluZyB8fCBvcHRpb25zLl9zaG91bGRSZXNvbHZlSHJlZiB8fCAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKHVybCkucGF0aG5hbWUgPT09ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkoYXMpLnBhdGhuYW1lO1xuICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSB7XG4gICAgICAgICAgICAuLi50aGlzLnN0YXRlXG4gICAgICAgIH07XG4gICAgICAgIC8vIGZvciBzdGF0aWMgcGFnZXMgd2l0aCBxdWVyeSBwYXJhbXMgaW4gdGhlIFVSTCB3ZSBkZWxheVxuICAgICAgICAvLyBtYXJraW5nIHRoZSByb3V0ZXIgcmVhZHkgdW50aWwgYWZ0ZXIgdGhlIHF1ZXJ5IGlzIHVwZGF0ZWRcbiAgICAgICAgLy8gb3IgYSBuYXZpZ2F0aW9uIGhhcyBvY2N1cnJlZFxuICAgICAgICBjb25zdCByZWFkeVN0YXRlQ2hhbmdlID0gdGhpcy5pc1JlYWR5ICE9PSB0cnVlO1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICBjb25zdCBpc1NzciA9IHRoaXMuaXNTc3I7XG4gICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3NyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgYSByb3V0ZSB0cmFuc2l0aW9uIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MgYmVmb3JlXG4gICAgICAgIC8vIHRoZSBxdWVyeSB1cGRhdGluZyBpcyB0cmlnZ2VyZWQgaWdub3JlIHF1ZXJ5IHVwZGF0aW5nXG4gICAgICAgIGlmIChpc1F1ZXJ5VXBkYXRpbmcgJiYgdGhpcy5jbGMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2TG9jYWxlID0gbmV4dFN0YXRlLmxvY2FsZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIG5leHRTdGF0ZS5sb2NhbGUgPSBvcHRpb25zLmxvY2FsZSA9PT0gZmFsc2UgPyB0aGlzLmRlZmF1bHRMb2NhbGUgOiBvcHRpb25zLmxvY2FsZSB8fCBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxvY2FsZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubG9jYWxlID0gbmV4dFN0YXRlLmxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFzID0gKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKCgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKGFzKSA/ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzKSA6IGFzKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZVBhdGhSZXN1bHQgPSAoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkocGFyc2VkQXMucGF0aG5hbWUsIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICBpZiAobG9jYWxlUGF0aFJlc3VsdC5kZXRlY3RlZExvY2FsZSkge1xuICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5sb2NhbGUgPSBsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlO1xuICAgICAgICAgICAgICAgIHBhcnNlZEFzLnBhdGhuYW1lID0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkocGFyc2VkQXMucGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgIGFzID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZEFzKTtcbiAgICAgICAgICAgICAgICB1cmwgPSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkoKDAsIF9oYXNiYXNlcGF0aC5oYXNCYXNlUGF0aCkodXJsKSA/ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKHVybCkgOiB1cmwsIHRoaXMubG9jYWxlcykucGF0aG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRpZE5hdmlnYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiB0aGUgZW52IGNoZWNrIGFnYWluIHNpbmNlIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgIC8vIG1vdmVzIHRoaXMgb24gaXRzIG93biBkdWUgdG8gdGhlIHJldHVyblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXNfbG9jYWxlcztcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbG9jYWxlIGlzbid0IGNvbmZpZ3VyZWQgaGFyZCBuYXZpZ2F0ZSB0byBzaG93IDQwNCBwYWdlXG4gICAgICAgICAgICAgICAgaWYgKCEoKF90aGlzX2xvY2FsZXMgPSB0aGlzLmxvY2FsZXMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpc19sb2NhbGVzLmluY2x1ZGVzKG5leHRTdGF0ZS5sb2NhbGUpKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWRBcy5wYXRobmFtZSA9ICgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkocGFyc2VkQXMucGF0aG5hbWUsIG5leHRTdGF0ZS5sb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShwYXJzZWRBcyksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2FzIHByZXZpb3VzbHkgYSByZXR1cm4gYnV0IHdhcyByZW1vdmVkIGluIGZhdm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIGJldHRlciBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2l0aCByZWdlbmVyYXRvciBydW50aW1lXG4gICAgICAgICAgICAgICAgICAgIGRpZE5hdmlnYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZXRlY3RlZERvbWFpbiA9ICgwLCBfZGV0ZWN0ZG9tYWlubG9jYWxlLmRldGVjdERvbWFpbkxvY2FsZSkodGhpcy5kb21haW5Mb2NhbGVzLCB1bmRlZmluZWQsIG5leHRTdGF0ZS5sb2NhbGUpO1xuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB3cmFwIHRoaXMgaW4gdGhlIGVudiBjaGVjayBhZ2FpbiBzaW5jZSByZWdlbmVyYXRvciBydW50aW1lXG4gICAgICAgICAgICAvLyBtb3ZlcyB0aGlzIG9uIGl0cyBvd24gZHVlIHRvIHRoZSByZXR1cm5cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgYXJlIG5hdmlnYXRpbmcgdG8gYSBkb21haW4gbG9jYWxlIGVuc3VyZSB3ZSByZWRpcmVjdCB0byB0aGVcbiAgICAgICAgICAgICAgICAvLyBjb3JyZWN0IGRvbWFpblxuICAgICAgICAgICAgICAgIGlmICghZGlkTmF2aWdhdGUgJiYgZGV0ZWN0ZWREb21haW4gJiYgdGhpcy5pc0xvY2FsZURvbWFpbiAmJiBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lICE9PSBkZXRlY3RlZERvbWFpbi5kb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNOb0Jhc2VQYXRoID0gKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkoYXMpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cFwiICsgKGRldGVjdGVkRG9tYWluLmh0dHAgPyBcIlwiIDogXCJzXCIpICsgXCI6Ly9cIiArIGRldGVjdGVkRG9tYWluLmRvbWFpbiArICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKFwiXCIgKyAobmV4dFN0YXRlLmxvY2FsZSA9PT0gZGV0ZWN0ZWREb21haW4uZGVmYXVsdExvY2FsZSA/IFwiXCIgOiBcIi9cIiArIG5leHRTdGF0ZS5sb2NhbGUpICsgKGFzTm9CYXNlUGF0aCA9PT0gXCIvXCIgPyBcIlwiIDogYXNOb0Jhc2VQYXRoKSB8fCBcIi9cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2FzIHByZXZpb3VzbHkgYSByZXR1cm4gYnV0IHdhcyByZW1vdmVkIGluIGZhdm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIGJldHRlciBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2l0aCByZWdlbmVyYXRvciBydW50aW1lXG4gICAgICAgICAgICAgICAgICAgIGRpZE5hdmlnYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlkTmF2aWdhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBtYXJraW5nIHJvdXRlIGNoYW5nZXMgYXMgYSBuYXZpZ2F0aW9uIHN0YXJ0IGVudHJ5XG4gICAgICAgIGlmIChfdXRpbHMuU1QpIHtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoXCJyb3V0ZUNoYW5nZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHNoYWxsb3cgPWZhbHNlICwgc2Nyb2xsID10cnVlICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgcm91dGVQcm9wcyA9IHtcbiAgICAgICAgICAgIHNoYWxsb3dcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX2luRmxpZ2h0Um91dGUgJiYgdGhpcy5jbGMpIHtcbiAgICAgICAgICAgIGlmICghaXNTc3IpIHtcbiAgICAgICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJyb3V0ZUNoYW5nZUVycm9yXCIsIGJ1aWxkQ2FuY2VsbGF0aW9uRXJyb3IoKSwgdGhpcy5faW5GbGlnaHRSb3V0ZSwgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsYygpO1xuICAgICAgICAgICAgdGhpcy5jbGMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGFzID0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkoKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKSgoMCwgX2hhc2Jhc2VwYXRoLmhhc0Jhc2VQYXRoKShhcykgPyAoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShhcykgOiBhcywgb3B0aW9ucy5sb2NhbGUsIHRoaXMuZGVmYXVsdExvY2FsZSkpO1xuICAgICAgICBjb25zdCBjbGVhbmVkQXMgPSAoMCwgX3JlbW92ZWxvY2FsZS5yZW1vdmVMb2NhbGUpKCgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKGFzKSA/ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzKSA6IGFzLCBuZXh0U3RhdGUubG9jYWxlKTtcbiAgICAgICAgdGhpcy5faW5GbGlnaHRSb3V0ZSA9IGFzO1xuICAgICAgICBjb25zdCBsb2NhbGVDaGFuZ2UgPSBwcmV2TG9jYWxlICE9PSBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICAvLyBJZiB0aGUgdXJsIGNoYW5nZSBpcyBvbmx5IHJlbGF0ZWQgdG8gYSBoYXNoIGNoYW5nZVxuICAgICAgICAvLyBXZSBzaG91bGQgbm90IHByb2NlZWQuIFdlIHNob3VsZCBvbmx5IGNoYW5nZSB0aGUgc3RhdGUuXG4gICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nICYmIHRoaXMub25seUFIYXNoQ2hhbmdlKGNsZWFuZWRBcykgJiYgIWxvY2FsZUNoYW5nZSkge1xuICAgICAgICAgICAgbmV4dFN0YXRlLmFzUGF0aCA9IGNsZWFuZWRBcztcbiAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdChcImhhc2hDaGFuZ2VTdGFydFwiLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRoZSByZXNvbHZlZCBocmVmIHdoZW4gb25seSBhIGhhc2ggY2hhbmdlP1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShtZXRob2QsIHVybCwgYXMsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHNjcm9sbDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9IYXNoKGNsZWFuZWRBcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0KG5leHRTdGF0ZSwgdGhpcy5jb21wb25lbnRzW25leHRTdGF0ZS5yb3V0ZV0sIG51bGwpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBfaXNlcnJvci5kZWZhdWx0KShlcnIpICYmIGVyci5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwicm91dGVDaGFuZ2VFcnJvclwiLCBlcnIsIGNsZWFuZWRBcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdChcImhhc2hDaGFuZ2VDb21wbGV0ZVwiLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkID0gKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKHVybCk7XG4gICAgICAgIGxldCB7IHBhdGhuYW1lICwgcXVlcnkgIH0gPSBwYXJzZWQ7XG4gICAgICAgIC8vIGlmIHdlIGRldGVjdGVkIHRoZSBwYXRoIGFzIGFwcCByb3V0ZSBkdXJpbmcgcHJlZmV0Y2hpbmdcbiAgICAgICAgLy8gdHJpZ2dlciBoYXJkIG5hdmlnYXRpb25cbiAgICAgICAgaWYgKChfdGhpc19jb21wb25lbnRzX3BhdGhuYW1lID0gdGhpcy5jb21wb25lbnRzW3BhdGhuYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzX2NvbXBvbmVudHNfcGF0aG5hbWUuX19hcHBSb3V0ZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICB1cmw6IGFzLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgYnVpbGQgbWFuaWZlc3QgbmVlZHMgdG8gYmUgbG9hZGVkIGJlZm9yZSBhdXRvLXN0YXRpYyBkeW5hbWljIHBhZ2VzXG4gICAgICAgIC8vIGdldCB0aGVpciBxdWVyeSBwYXJhbWV0ZXJzIHRvIGFsbG93IGVuc3VyaW5nIHRoZXkgY2FuIGJlIHBhcnNlZCBwcm9wZXJseVxuICAgICAgICAvLyB3aGVuIHJld3JpdHRlbiB0b1xuICAgICAgICBsZXQgcGFnZXMsIHJld3JpdGVzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgW3BhZ2VzLCB7IF9fcmV3cml0ZXM6IHJld3JpdGVzICB9XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXIuZ2V0UGFnZUxpc3QoKSxcbiAgICAgICAgICAgICAgICAoMCwgX3JvdXRlbG9hZGVyLmdldENsaWVudEJ1aWxkTWFuaWZlc3QpKCksXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlTG9hZGVyLmdldE1pZGRsZXdhcmUoKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gSWYgd2UgZmFpbCB0byByZXNvbHZlIHRoZSBwYWdlIGxpc3Qgb3IgY2xpZW50LWJ1aWxkIG1hbmlmZXN0LCB3ZSBtdXN0XG4gICAgICAgICAgICAvLyBkbyBhIHNlcnZlci1zaWRlIHRyYW5zaXRpb246XG4gICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgdXJsOiBhcyxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGFza2VkIHRvIGNoYW5nZSB0aGUgY3VycmVudCBVUkwgd2Ugc2hvdWxkIHJlbG9hZCB0aGUgY3VycmVudCBwYWdlXG4gICAgICAgIC8vIChub3QgbG9jYXRpb24ucmVsb2FkKCkgYnV0IHJlbG9hZCBnZXRJbml0aWFsUHJvcHMgYW5kIG90aGVyIE5leHQuanMgc3R1ZmZzKVxuICAgICAgICAvLyBXZSBhbHNvIG5lZWQgdG8gc2V0IHRoZSBtZXRob2QgPSByZXBsYWNlU3RhdGUgYWx3YXlzXG4gICAgICAgIC8vIGFzIHRoaXMgc2hvdWxkIG5vdCBnbyBpbnRvIHRoZSBoaXN0b3J5IChUaGF0J3MgaG93IGJyb3dzZXJzIHdvcmspXG4gICAgICAgIC8vIFdlIHNob3VsZCBjb21wYXJlIHRoZSBuZXcgYXNQYXRoIHRvIHRoZSBjdXJyZW50IGFzUGF0aCwgbm90IHRoZSB1cmxcbiAgICAgICAgaWYgKCF0aGlzLnVybElzTmV3KGNsZWFuZWRBcykgJiYgIWxvY2FsZUNoYW5nZSkge1xuICAgICAgICAgICAgbWV0aG9kID0gXCJyZXBsYWNlU3RhdGVcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlc29sdmUgdGhlIGFzIHZhbHVlIHVzaW5nIHJld3JpdGVzIGZvciBkeW5hbWljIFNTR1xuICAgICAgICAvLyBwYWdlcyB0byBhbGxvdyBidWlsZGluZyB0aGUgZGF0YSBVUkwgY29ycmVjdGx5XG4gICAgICAgIGxldCByZXNvbHZlZEFzID0gYXM7XG4gICAgICAgIC8vIHVybCBhbmQgYXMgc2hvdWxkIGFsd2F5cyBiZSBwcmVmaXhlZCB3aXRoIGJhc2VQYXRoIGJ5IHRoaXNcbiAgICAgICAgLy8gcG9pbnQgYnkgZWl0aGVyIG5leHQvbGluayBvciByb3V0ZXIucHVzaC9yZXBsYWNlIHNvIHN0cmlwIHRoZVxuICAgICAgICAvLyBiYXNlUGF0aCBmcm9tIHRoZSBwYXRobmFtZSB0byBtYXRjaCB0aGUgcGFnZXMgZGlyIDEtdG8tMVxuICAgICAgICBwYXRobmFtZSA9IHBhdGhuYW1lID8gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKCgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKHBhdGhuYW1lKSkgOiBwYXRobmFtZTtcbiAgICAgICAgbGV0IHJvdXRlID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbiAgICAgICAgY29uc3QgcGFyc2VkQXNQYXRobmFtZSA9IGFzLnN0YXJ0c1dpdGgoXCIvXCIpICYmICgwLCBfcGFyc2VyZWxhdGl2ZXVybC5wYXJzZVJlbGF0aXZlVXJsKShhcykucGF0aG5hbWU7XG4gICAgICAgIGNvbnN0IGlzTWlkZGxld2FyZVJld3JpdGUgPSAhIShwYXJzZWRBc1BhdGhuYW1lICYmIHJvdXRlICE9PSBwYXJzZWRBc1BhdGhuYW1lICYmICghKDAsIF9pc2R5bmFtaWMuaXNEeW5hbWljUm91dGUpKHJvdXRlKSB8fCAhKDAsIF9yb3V0ZW1hdGNoZXIuZ2V0Um91dGVNYXRjaGVyKSgoMCwgX3JvdXRlcmVnZXguZ2V0Um91dGVSZWdleCkocm91dGUpKShwYXJzZWRBc1BhdGhuYW1lKSkpO1xuICAgICAgICAvLyB3ZSBkb24ndCBhdHRlbXB0IHJlc29sdmUgYXNQYXRoIHdoZW4gd2UgbmVlZCB0byBleGVjdXRlXG4gICAgICAgIC8vIG1pZGRsZXdhcmUgYXMgdGhlIHJlc29sdmluZyB3aWxsIG9jY3VyIHNlcnZlci1zaWRlXG4gICAgICAgIGNvbnN0IGlzTWlkZGxld2FyZU1hdGNoID0gIW9wdGlvbnMuc2hhbGxvdyAmJiBhd2FpdCBtYXRjaGVzTWlkZGxld2FyZSh7XG4gICAgICAgICAgICBhc1BhdGg6IGFzLFxuICAgICAgICAgICAgbG9jYWxlOiBuZXh0U3RhdGUubG9jYWxlLFxuICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNRdWVyeVVwZGF0aW5nICYmIGlzTWlkZGxld2FyZU1hdGNoKSB7XG4gICAgICAgICAgICBzaG91bGRSZXNvbHZlSHJlZiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRSZXNvbHZlSHJlZiAmJiBwYXRobmFtZSAhPT0gXCIvX2Vycm9yXCIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuX3Nob3VsZFJlc29sdmVIcmVmID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSEFTX1JFV1JJVEVTICYmIGFzLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmV3cml0ZXNSZXN1bHQgPSAoMCwgX3Jlc29sdmVyZXdyaXRlcy5kZWZhdWx0KSgoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKGNsZWFuZWRBcywgbmV4dFN0YXRlLmxvY2FsZSksIHRydWUpLCBwYWdlcywgcmV3cml0ZXMsIHF1ZXJ5LCAocCk9PnJlc29sdmVEeW5hbWljUm91dGUocCwgcGFnZXMpLCB0aGlzLmxvY2FsZXMpO1xuICAgICAgICAgICAgICAgIGlmIChyZXdyaXRlc1Jlc3VsdC5leHRlcm5hbERlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNNaWRkbGV3YXJlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRBcyA9IHJld3JpdGVzUmVzdWx0LmFzUGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJld3JpdGVzUmVzdWx0Lm1hdGNoZWRQYWdlICYmIHJld3JpdGVzUmVzdWx0LnJlc29sdmVkSHJlZikge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGRpcmVjdGx5IG1hdGNoZXMgYSBwYWdlIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBocmVmIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbG93IHRoZSBjb3JyZWN0IHBhZ2UgY2h1bmsgdG8gYmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKShwYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNNaWRkbGV3YXJlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShwYXJzZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSByZXNvbHZlRHluYW1pY1JvdXRlKHBhdGhuYW1lLCBwYWdlcyk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5wYXRobmFtZSAhPT0gcGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUgPSBwYXJzZWQucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKHBhdGhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01pZGRsZXdhcmVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoMCwgX2lzbG9jYWx1cmwuaXNMb2NhbFVSTCkoYXMpKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhyZWY6IFwiJyArIHVybCArICdcIiBhbmQgYXM6IFwiJyArIGFzICsgJ1wiLCByZWNlaXZlZCByZWxhdGl2ZSBocmVmIGFuZCBleHRlcm5hbCBhcycgKyBcIlxcblNlZSBtb3JlIGluZm86IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2ludmFsaWQtcmVsYXRpdmUtdXJsLWV4dGVybmFsLWFzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgIHVybDogYXMsXG4gICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlZEFzID0gKDAsIF9yZW1vdmVsb2NhbGUucmVtb3ZlTG9jYWxlKSgoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShyZXNvbHZlZEFzKSwgbmV4dFN0YXRlLmxvY2FsZSk7XG4gICAgICAgIHJvdXRlID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbiAgICAgICAgbGV0IHJvdXRlTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShyb3V0ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFzID0gKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKHJlc29sdmVkQXMpO1xuICAgICAgICAgICAgY29uc3QgYXNQYXRobmFtZSA9IHBhcnNlZEFzLnBhdGhuYW1lO1xuICAgICAgICAgICAgY29uc3Qgcm91dGVSZWdleCA9ICgwLCBfcm91dGVyZWdleC5nZXRSb3V0ZVJlZ2V4KShyb3V0ZSk7XG4gICAgICAgICAgICByb3V0ZU1hdGNoID0gKDAsIF9yb3V0ZW1hdGNoZXIuZ2V0Um91dGVNYXRjaGVyKShyb3V0ZVJlZ2V4KShhc1BhdGhuYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEludGVycG9sYXRlID0gcm91dGUgPT09IGFzUGF0aG5hbWU7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZWRBcyA9IHNob3VsZEludGVycG9sYXRlID8gKDAsIF9pbnRlcnBvbGF0ZWFzLmludGVycG9sYXRlQXMpKHJvdXRlLCBhc1BhdGhuYW1lLCBxdWVyeSkgOiB7fTtcbiAgICAgICAgICAgIGlmICghcm91dGVNYXRjaCB8fCBzaG91bGRJbnRlcnBvbGF0ZSAmJiAhaW50ZXJwb2xhdGVkQXMucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWlzc2luZ1BhcmFtcyA9IE9iamVjdC5rZXlzKHJvdXRlUmVnZXguZ3JvdXBzKS5maWx0ZXIoKHBhcmFtKT0+IXF1ZXJ5W3BhcmFtXSAmJiAhcm91dGVSZWdleC5ncm91cHNbcGFyYW1dLm9wdGlvbmFsKTtcbiAgICAgICAgICAgICAgICBpZiAobWlzc2luZ1BhcmFtcy5sZW5ndGggPiAwICYmICFpc01pZGRsZXdhcmVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJcIiArIChzaG91bGRJbnRlcnBvbGF0ZSA/IFwiSW50ZXJwb2xhdGluZyBocmVmXCIgOiBcIk1pc21hdGNoaW5nIGBhc2AgYW5kIGBocmVmYFwiKSArIFwiIGZhaWxlZCB0byBtYW51YWxseSBwcm92aWRlIFwiICsgKFwidGhlIHBhcmFtczogXCIgKyBtaXNzaW5nUGFyYW1zLmpvaW4oXCIsIFwiKSArIFwiIGluIHRoZSBgaHJlZmAncyBgcXVlcnlgXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKHNob3VsZEludGVycG9sYXRlID8gXCJUaGUgcHJvdmlkZWQgYGhyZWZgIChcIiArIHVybCArIFwiKSB2YWx1ZSBpcyBtaXNzaW5nIHF1ZXJ5IHZhbHVlcyAoXCIgKyBtaXNzaW5nUGFyYW1zLmpvaW4oXCIsIFwiKSArIFwiKSB0byBiZSBpbnRlcnBvbGF0ZWQgcHJvcGVybHkuIFwiIDogXCJUaGUgcHJvdmlkZWQgYGFzYCB2YWx1ZSAoXCIgKyBhc1BhdGhuYW1lICsgXCIpIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBgaHJlZmAgdmFsdWUgKFwiICsgcm91dGUgKyBcIikuIFwiKSArIChcIlJlYWQgbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvXCIgKyAoc2hvdWxkSW50ZXJwb2xhdGUgPyBcImhyZWYtaW50ZXJwb2xhdGlvbi1mYWlsZWRcIiA6IFwiaW5jb21wYXRpYmxlLWhyZWYtYXNcIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZEludGVycG9sYXRlKSB7XG4gICAgICAgICAgICAgICAgYXMgPSAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikoT2JqZWN0LmFzc2lnbih7fSwgcGFyc2VkQXMsIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IGludGVycG9sYXRlZEFzLnJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6ICgwLCBfb21pdC5vbWl0KShxdWVyeSwgaW50ZXJwb2xhdGVkQXMucGFyYW1zKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgcGFyYW1zIGludG8gYHF1ZXJ5YCwgb3ZlcndyaXRpbmcgYW55IHNwZWNpZmllZCBpbiBzZWFyY2hcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHF1ZXJ5LCByb3V0ZU1hdGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUXVlcnlVcGRhdGluZykge1xuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwicm91dGVDaGFuZ2VTdGFydFwiLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNFcnJvclJvdXRlID0gdGhpcy5wYXRobmFtZSA9PT0gXCIvNDA0XCIgfHwgdGhpcy5wYXRobmFtZSA9PT0gXCIvX2Vycm9yXCI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wcywgX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wc19wYWdlUHJvcHMsIF9yb3V0ZUluZm9fcHJvcHM7XG4gICAgICAgICAgICBsZXQgcm91dGVJbmZvID0gYXdhaXQgdGhpcy5nZXRSb3V0ZUluZm8oe1xuICAgICAgICAgICAgICAgIHJvdXRlLFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgIGFzLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgcm91dGVQcm9wcyxcbiAgICAgICAgICAgICAgICBsb2NhbGU6IG5leHRTdGF0ZS5sb2NhbGUsXG4gICAgICAgICAgICAgICAgaXNQcmV2aWV3OiBuZXh0U3RhdGUuaXNQcmV2aWV3LFxuICAgICAgICAgICAgICAgIGhhc01pZGRsZXdhcmU6IGlzTWlkZGxld2FyZU1hdGNoLFxuICAgICAgICAgICAgICAgIHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZTogb3B0aW9ucy51bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGUsXG4gICAgICAgICAgICAgICAgaXNRdWVyeVVwZGF0aW5nOiBpc1F1ZXJ5VXBkYXRpbmcgJiYgIXRoaXMuaXNGYWxsYmFjayxcbiAgICAgICAgICAgICAgICBpc01pZGRsZXdhcmVSZXdyaXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nICYmICFvcHRpb25zLnNoYWxsb3cpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9iZmwoYXMsIFwicmVzb2x2ZWRBc1wiIGluIHJvdXRlSW5mbyA/IHJvdXRlSW5mby5yZXNvbHZlZEFzIDogdW5kZWZpbmVkLCBuZXh0U3RhdGUubG9jYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcInJvdXRlXCIgaW4gcm91dGVJbmZvICYmIGlzTWlkZGxld2FyZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgPSByb3V0ZUluZm8ucm91dGUgfHwgcm91dGU7XG4gICAgICAgICAgICAgICAgcm91dGUgPSBwYXRobmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoIXJvdXRlUHJvcHMuc2hhbGxvdykge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IE9iamVjdC5hc3NpZ24oe30sIHJvdXRlSW5mby5xdWVyeSB8fCB7fSwgcXVlcnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhbmVkUGFyc2VkUGF0aG5hbWUgPSAoMCwgX2hhc2Jhc2VwYXRoLmhhc0Jhc2VQYXRoKShwYXJzZWQucGF0aG5hbWUpID8gKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkocGFyc2VkLnBhdGhuYW1lKSA6IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICBpZiAocm91dGVNYXRjaCAmJiBwYXRobmFtZSAhPT0gY2xlYW5lZFBhcnNlZFBhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJvdXRlTWF0Y2gpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3V0ZU1hdGNoICYmIHF1ZXJ5W2tleV0gPT09IHJvdXRlTWF0Y2hba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBxdWVyeVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShwYXRobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlZml4ZWRBcyA9ICFyb3V0ZVByb3BzLnNoYWxsb3cgJiYgcm91dGVJbmZvLnJlc29sdmVkQXMgPyByb3V0ZUluZm8ucmVzb2x2ZWRBcyA6ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkobmV3IFVSTChhcywgbG9jYXRpb24uaHJlZikucGF0aG5hbWUsIG5leHRTdGF0ZS5sb2NhbGUpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJld3JpdGVBcyA9IHByZWZpeGVkQXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgX2hhc2Jhc2VwYXRoLmhhc0Jhc2VQYXRoKShyZXdyaXRlQXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXdyaXRlQXMgPSAoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShyZXdyaXRlQXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbGVSZXN1bHQgPSAoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkocmV3cml0ZUFzLCB0aGlzLmxvY2FsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFN0YXRlLmxvY2FsZSA9IGxvY2FsZVJlc3VsdC5kZXRlY3RlZExvY2FsZSB8fCBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV3cml0ZUFzID0gbG9jYWxlUmVzdWx0LnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlUmVnZXggPSAoMCwgX3JvdXRlcmVnZXguZ2V0Um91dGVSZWdleCkocGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJSb3V0ZU1hdGNoID0gKDAsIF9yb3V0ZW1hdGNoZXIuZ2V0Um91dGVNYXRjaGVyKShyb3V0ZVJlZ2V4KShuZXcgVVJMKHJld3JpdGVBcywgbG9jYXRpb24uaHJlZikucGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyUm91dGVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihxdWVyeSwgY3VyUm91dGVNYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgcm91dGVJbmZvIGJyaW5ncyBhIHJlZGlyZWN0IHdlIHNpbXBseSBhcHBseSBpdC5cbiAgICAgICAgICAgIGlmIChcInR5cGVcIiBpbiByb3V0ZUluZm8pIHtcbiAgICAgICAgICAgICAgICBpZiAocm91dGVJbmZvLnR5cGUgPT09IFwicmVkaXJlY3QtaW50ZXJuYWxcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2UobWV0aG9kLCByb3V0ZUluZm8ubmV3VXJsLCByb3V0ZUluZm8ubmV3QXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcm91dGVJbmZvLmRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSByb3V0ZUluZm8uQ29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQudW5zdGFibGVfc2NyaXB0TG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0cyA9IFtdLmNvbmNhdChjb21wb25lbnQudW5zdGFibGVfc2NyaXB0TG9hZGVyKCkpO1xuICAgICAgICAgICAgICAgIHNjcmlwdHMuZm9yRWFjaCgoc2NyaXB0KT0+e1xuICAgICAgICAgICAgICAgICAgICAoMCwgX3NjcmlwdC5oYW5kbGVDbGllbnRTY3JpcHRMb2FkKShzY3JpcHQucHJvcHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGFuZGxlIHJlZGlyZWN0IG9uIGNsaWVudC10cmFuc2l0aW9uXG4gICAgICAgICAgICBpZiAoKHJvdXRlSW5mby5fX05fU1NHIHx8IHJvdXRlSW5mby5fX05fU1NQKSAmJiByb3V0ZUluZm8ucHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocm91dGVJbmZvLnByb3BzLnBhZ2VQcm9wcyAmJiByb3V0ZUluZm8ucHJvcHMucGFnZVByb3BzLl9fTl9SRURJUkVDVCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGRlc3RpbmF0aW9uIGZyb20gcmVkaXJlY3Qgd2l0aG91dCBhZGRpbmcgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubG9jYWxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gcm91dGVJbmZvLnByb3BzLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1Q7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGRlc3RpbmF0aW9uIGlzIGludGVybmFsIChyZXNvbHZlcyB0byBhIHBhZ2UpIGFuZCBhdHRlbXB0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWVudC1uYXZpZ2F0aW9uIGlmIGl0IGlzIGZhbGxpbmcgYmFjayB0byBoYXJkIG5hdmlnYXRpb24gaWZcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBub3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLnN0YXJ0c1dpdGgoXCIvXCIpICYmIHJvdXRlSW5mby5wcm9wcy5wYWdlUHJvcHMuX19OX1JFRElSRUNUX0JBU0VfUEFUSCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEhyZWYgPSAoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkoZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkSHJlZi5wYXRobmFtZSA9IHJlc29sdmVEeW5hbWljUm91dGUocGFyc2VkSHJlZi5wYXRobmFtZSwgcGFnZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB1cmw6IG5ld1VybCAsIGFzOiBuZXdBcyAgfSA9IHByZXBhcmVVcmxBcyh0aGlzLCBkZXN0aW5hdGlvbiwgZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlKG1ldGhvZCwgbmV3VXJsLCBuZXdBcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpPT57fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5pc1ByZXZpZXcgPSAhIXJvdXRlSW5mby5wcm9wcy5fX05fUFJFVklFVztcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgU1NHIGRhdGEgNDA0XG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlSW5mby5wcm9wcy5ub3RGb3VuZCA9PT0gU1NHX0RBVEFfTk9UX0ZPVU5EKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub3RGb3VuZFJvdXRlO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudChcIi80MDRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RGb3VuZFJvdXRlID0gXCIvNDA0XCI7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kUm91dGUgPSBcIi9fZXJyb3JcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8gPSBhd2FpdCB0aGlzLmdldFJvdXRlSW5mbyh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZTogbm90Rm91bmRSb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBub3RGb3VuZFJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICBhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGxvdzogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGU6IG5leHRTdGF0ZS5sb2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ByZXZpZXc6IG5leHRTdGF0ZS5pc1ByZXZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc05vdEZvdW5kOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJ0eXBlXCIgaW4gcm91dGVJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1pZGRsZXdhcmUgZWZmZWN0IG9uIC80MDRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNRdWVyeVVwZGF0aW5nICYmIHRoaXMucGF0aG5hbWUgPT09IFwiL19lcnJvclwiICYmICgoX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wcyA9IHNlbGYuX19ORVhUX0RBVEFfXy5wcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wcyA9IF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHMucGFnZVByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wc19wYWdlUHJvcHMuc3RhdHVzQ29kZSkgPT09IDUwMCAmJiAoKF9yb3V0ZUluZm9fcHJvcHMgPSByb3V0ZUluZm8ucHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGVJbmZvX3Byb3BzLnBhZ2VQcm9wcykpIHtcbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgc3RhdHVzQ29kZSBpcyBzdGlsbCBjb3JyZWN0IGZvciBzdGF0aWMgNTAwIHBhZ2VcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHVwZGF0aW5nIHF1ZXJ5IGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgcm91dGVJbmZvLnByb3BzLnBhZ2VQcm9wcy5zdGF0dXNDb2RlID0gNTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9yb3V0ZUluZm9fcm91dGU7XG4gICAgICAgICAgICAvLyBzaGFsbG93IHJvdXRpbmcgaXMgb25seSBhbGxvd2VkIGZvciBzYW1lIHBhZ2UgVVJMIGNoYW5nZXMuXG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkU2hhbGxvd1JvdXRlID0gb3B0aW9ucy5zaGFsbG93ICYmIG5leHRTdGF0ZS5yb3V0ZSA9PT0gKChfcm91dGVJbmZvX3JvdXRlID0gcm91dGVJbmZvLnJvdXRlKSAhPSBudWxsID8gX3JvdXRlSW5mb19yb3V0ZSA6IHJvdXRlKTtcbiAgICAgICAgICAgIHZhciBfb3B0aW9uc19zY3JvbGw7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRTY3JvbGwgPSAoX29wdGlvbnNfc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwpICE9IG51bGwgPyBfb3B0aW9uc19zY3JvbGwgOiAhaXNRdWVyeVVwZGF0aW5nICYmICFpc1ZhbGlkU2hhbGxvd1JvdXRlO1xuICAgICAgICAgICAgY29uc3QgcmVzZXRTY3JvbGwgPSBzaG91bGRTY3JvbGwgPyB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9IDogbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHVwY29taW5nU2Nyb2xsU3RhdGUgPSBmb3JjZWRTY3JvbGwgIT0gbnVsbCA/IGZvcmNlZFNjcm9sbCA6IHJlc2V0U2Nyb2xsO1xuICAgICAgICAgICAgLy8gdGhlIG5ldyBzdGF0ZSB0aGF0IHRoZSByb3V0ZXIgZ29ubmEgc2V0XG4gICAgICAgICAgICBjb25zdCB1cGNvbWluZ1JvdXRlclN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLm5leHRTdGF0ZSxcbiAgICAgICAgICAgICAgICByb3V0ZSxcbiAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBhc1BhdGg6IGNsZWFuZWRBcyxcbiAgICAgICAgICAgICAgICBpc0ZhbGxiYWNrOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHBhZ2UgYmVpbmcgcmVuZGVyZWQgaXMgdGhlIDQwNCBwYWdlLCB3ZSBzaG91bGQgb25seSB1cGRhdGUgdGhlXG4gICAgICAgICAgICAvLyBxdWVyeSBwYXJhbWV0ZXJzLiBSb3V0ZSBjaGFuZ2VzIGhlcmUgbWlnaHQgYWRkIHRoZSBiYXNlUGF0aCB3aGVuIGl0XG4gICAgICAgICAgICAvLyB3YXNuJ3Qgb3JpZ2luYWxseSBwcmVzZW50LiBUaGlzIGlzIGFsc28gd2h5IHRoaXMgYmxvY2sgaXMgYmVmb3JlIHRoZVxuICAgICAgICAgICAgLy8gYmVsb3cgYGNoYW5nZVN0YXRlYCBjYWxsIHdoaWNoIHVwZGF0ZXMgdGhlIGJyb3dzZXIncyBoaXN0b3J5IChjaGFuZ2luZ1xuICAgICAgICAgICAgLy8gdGhlIFVSTCkuXG4gICAgICAgICAgICBpZiAoaXNRdWVyeVVwZGF0aW5nICYmIGlzRXJyb3JSb3V0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzMSwgX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wc19wYWdlUHJvcHMxLCBfcm91dGVJbmZvX3Byb3BzMTtcbiAgICAgICAgICAgICAgICByb3V0ZUluZm8gPSBhd2FpdCB0aGlzLmdldFJvdXRlSW5mbyh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlOiB0aGlzLnBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogdGhpcy5wYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIGFzLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgICAgICByb3V0ZVByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFsbG93OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGU6IG5leHRTdGF0ZS5sb2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGlzUHJldmlldzogbmV4dFN0YXRlLmlzUHJldmlldyxcbiAgICAgICAgICAgICAgICAgICAgaXNRdWVyeVVwZGF0aW5nOiBpc1F1ZXJ5VXBkYXRpbmcgJiYgIXRoaXMuaXNGYWxsYmFja1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChcInR5cGVcIiBpbiByb3V0ZUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBtaWRkbGV3YXJlIGVmZmVjdCBvbiBcIiArIHRoaXMucGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXRobmFtZSA9PT0gXCIvX2Vycm9yXCIgJiYgKChfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzMSA9IHNlbGYuX19ORVhUX0RBVEFfXy5wcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IChfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wczEgPSBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzMS5wYWdlUHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wczEuc3RhdHVzQ29kZSkgPT09IDUwMCAmJiAoKF9yb3V0ZUluZm9fcHJvcHMxID0gcm91dGVJbmZvLnByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlSW5mb19wcm9wczEucGFnZVByb3BzKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgc3RhdHVzQ29kZSBpcyBzdGlsbCBjb3JyZWN0IGZvciBzdGF0aWMgNTAwIHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB1cGRhdGluZyBxdWVyeSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMucGFnZVByb3BzLnN0YXR1c0NvZGUgPSA1MDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0KHVwY29taW5nUm91dGVyU3RhdGUsIHJvdXRlSW5mbywgdXBjb21pbmdTY3JvbGxTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgX2lzZXJyb3IuZGVmYXVsdCkoZXJyKSAmJiBlcnIuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJyb3V0ZUNoYW5nZUVycm9yXCIsIGVyciwgY2xlYW5lZEFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwiYmVmb3JlSGlzdG9yeUNoYW5nZVwiLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKG1ldGhvZCwgdXJsLCBhcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBmb3IgcXVlcnkgdXBkYXRlcyB3ZSBjYW4gc2tpcCBpdCBpZiB0aGUgc3RhdGUgaXMgdW5jaGFuZ2VkIGFuZCB3ZSBkb24ndFxuICAgICAgICAgICAgLy8gbmVlZCB0byBzY3JvbGxcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9pc3N1ZXMvMzcxMzlcbiAgICAgICAgICAgIGNvbnN0IGNhblNraXBVcGRhdGluZyA9IGlzUXVlcnlVcGRhdGluZyAmJiAhdXBjb21pbmdTY3JvbGxTdGF0ZSAmJiAhcmVhZHlTdGF0ZUNoYW5nZSAmJiAhbG9jYWxlQ2hhbmdlICYmICgwLCBfY29tcGFyZXN0YXRlcy5jb21wYXJlUm91dGVyU3RhdGVzKSh1cGNvbWluZ1JvdXRlclN0YXRlLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgICAgIGlmICghY2FuU2tpcFVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXQodXBjb21pbmdSb3V0ZXJTdGF0ZSwgcm91dGVJbmZvLCB1cGNvbWluZ1Njcm9sbFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNhbmNlbGxlZCkgcm91dGVJbmZvLmVycm9yID0gcm91dGVJbmZvLmVycm9yIHx8IGU7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlSW5mby5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUXVlcnlVcGRhdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwicm91dGVDaGFuZ2VFcnJvclwiLCByb3V0ZUluZm8uZXJyb3IsIGNsZWFuZWRBcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgcm91dGVJbmZvLmVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFN0YXRlLmxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPSBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdChcInJvdXRlQ2hhbmdlQ29tcGxldGVcIiwgYXMsIHJvdXRlUHJvcHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBIGhhc2ggbWFyayAjIGlzIHRoZSBvcHRpb25hbCBsYXN0IHBhcnQgb2YgYSBVUkxcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoUmVnZXggPSAvIy4rJC87XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFNjcm9sbCAmJiBoYXNoUmVnZXgudGVzdChhcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0hhc2goYXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmICgoMCwgX2lzZXJyb3IuZGVmYXVsdCkoZXJyKSAmJiBlcnIuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYW5nZVN0YXRlKG1ldGhvZCwgdXJsLCBhcywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSBvcHRpb25zID0ge307XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lmhpc3RvcnkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiV2FybmluZzogd2luZG93Lmhpc3RvcnkgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuaGlzdG9yeVttZXRob2RdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIldhcm5pbmc6IHdpbmRvdy5oaXN0b3J5LlwiICsgbWV0aG9kICsgXCIgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gXCJwdXNoU3RhdGVcIiB8fCAoMCwgX3V0aWxzLmdldFVSTCkoKSAhPT0gYXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NoYWxsb3cgPSBvcHRpb25zLnNoYWxsb3c7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeVttZXRob2RdKHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgYXMsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBfX046IHRydWUsXG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLl9rZXkgPSBtZXRob2QgIT09IFwicHVzaFN0YXRlXCIgPyB0aGlzLl9rZXkgOiBjcmVhdGVLZXkoKVxuICAgICAgICAgICAgfSwgLy8gTW9zdCBicm93c2VycyBjdXJyZW50bHkgaWdub3JlcyB0aGlzIHBhcmFtZXRlciwgYWx0aG91Z2ggdGhleSBtYXkgdXNlIGl0IGluIHRoZSBmdXR1cmUuXG4gICAgICAgICAgICAvLyBQYXNzaW5nIHRoZSBlbXB0eSBzdHJpbmcgaGVyZSBzaG91bGQgYmUgc2FmZSBhZ2FpbnN0IGZ1dHVyZSBjaGFuZ2VzIHRvIHRoZSBtZXRob2QuXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGlzdG9yeS9yZXBsYWNlU3RhdGVcbiAgICAgICAgICAgIFwiXCIsIGFzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBoYW5kbGVSb3V0ZUluZm9FcnJvcihlcnIsIHBhdGhuYW1lLCBxdWVyeSwgYXMsIHJvdXRlUHJvcHMsIGxvYWRFcnJvckZhaWwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICBpZiAoZXJyLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgLy8gYnViYmxlIHVwIGNhbmNlbGxhdGlvbiBlcnJvcnNcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIF9yb3V0ZWxvYWRlci5pc0Fzc2V0RXJyb3IpKGVycikgfHwgbG9hZEVycm9yRmFpbCkge1xuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwicm91dGVDaGFuZ2VFcnJvclwiLCBlcnIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIC8vIElmIHdlIGNhbid0IGxvYWQgdGhlIHBhZ2UgaXQgY291bGQgYmUgb25lIG9mIGZvbGxvd2luZyByZWFzb25zXG4gICAgICAgICAgICAvLyAgMS4gUGFnZSBkb2Vzbid0IGV4aXN0c1xuICAgICAgICAgICAgLy8gIDIuIFBhZ2UgZG9lcyBleGlzdCBpbiBhIGRpZmZlcmVudCB6b25lXG4gICAgICAgICAgICAvLyAgMy4gSW50ZXJuYWwgZXJyb3Igd2hpbGUgbG9hZGluZyB0aGUgcGFnZVxuICAgICAgICAgICAgLy8gU28sIGRvaW5nIGEgaGFyZCByZWxvYWQgaXMgdGhlIHByb3BlciB3YXkgdG8gZGVhbCB3aXRoIHRoaXMuXG4gICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgdXJsOiBhcyxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQ2hhbmdpbmcgdGhlIFVSTCBkb2Vzbid0IGJsb2NrIGV4ZWN1dGluZyB0aGUgY3VycmVudCBjb2RlIHBhdGguXG4gICAgICAgICAgICAvLyBTbyBsZXQncyB0aHJvdyBhIGNhbmNlbGxhdGlvbiBlcnJvciBzdG9wIHRoZSByb3V0aW5nIGxvZ2ljLlxuICAgICAgICAgICAgdGhyb3cgYnVpbGRDYW5jZWxsYXRpb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcHJvcHM7XG4gICAgICAgICAgICBjb25zdCB7IHBhZ2U6IENvbXBvbmVudCAsIHN0eWxlU2hlZXRzICB9ID0gYXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudChcIi9fZXJyb3JcIik7XG4gICAgICAgICAgICBjb25zdCByb3V0ZUluZm8gPSB7XG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXRzLFxuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFyb3V0ZUluZm8ucHJvcHMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMgPSBhd2FpdCB0aGlzLmdldEluaXRpYWxQcm9wcyhDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZ2lwRXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBlcnJvciBwYWdlIGBnZXRJbml0aWFsUHJvcHNgOiBcIiwgZ2lwRXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcm91dGVJbmZvLnByb3BzID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJvdXRlSW5mbztcbiAgICAgICAgfSBjYXRjaCAocm91dGVJbmZvRXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSb3V0ZUluZm9FcnJvcigoMCwgX2lzZXJyb3IuZGVmYXVsdCkocm91dGVJbmZvRXJyKSA/IHJvdXRlSW5mb0VyciA6IG5ldyBFcnJvcihyb3V0ZUluZm9FcnIgKyBcIlwiKSwgcGF0aG5hbWUsIHF1ZXJ5LCBhcywgcm91dGVQcm9wcywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0Um91dGVJbmZvKHBhcmFtKSB7XG4gICAgICAgIGxldCB7IHJvdXRlOiByZXF1ZXN0ZWRSb3V0ZSAsIHBhdGhuYW1lICwgcXVlcnkgLCBhcyAsIHJlc29sdmVkQXMgLCByb3V0ZVByb3BzICwgbG9jYWxlICwgaGFzTWlkZGxld2FyZSAsIGlzUHJldmlldyAsIHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSAsIGlzUXVlcnlVcGRhdGluZyAsIGlzTWlkZGxld2FyZVJld3JpdGUgLCBpc05vdEZvdW5kICB9ID0gcGFyYW07XG4gICAgICAgIC8qKlxuICAgICAqIFRoaXMgYHJvdXRlYCBiaW5kaW5nIGNhbiBjaGFuZ2UgaWYgdGhlcmUncyBhIHJld3JpdGVcbiAgICAgKiBzbyB3ZSBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBvcmlnaW5hbCByZXF1ZXN0ZWQgcm91dGVcbiAgICAgKiBzbyB3ZSBjYW4gc3RvcmUgdGhlIGNhY2hlIGZvciBpdCBhbmQgYXZvaWQgcmUtcmVxdWVzdGluZyBldmVyeSB0aW1lXG4gICAgICogZm9yIHNoYWxsb3cgcm91dGluZyBwdXJwb3Nlcy5cbiAgICAgKi8gbGV0IHJvdXRlID0gcmVxdWVzdGVkUm91dGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgX2RhdGFfZWZmZWN0LCBfZGF0YV9lZmZlY3QxLCBfZGF0YV9lZmZlY3QyLCBfZGF0YV9yZXNwb25zZTtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZUNhbmNlbGxlZCA9IGdldENhbmNlbGxlZEhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIHJvdXRlLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdJbmZvID0gdGhpcy5jb21wb25lbnRzW3JvdXRlXTtcbiAgICAgICAgICAgIGlmIChyb3V0ZVByb3BzLnNoYWxsb3cgJiYgZXhpc3RpbmdJbmZvICYmIHRoaXMucm91dGUgPT09IHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nSW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNNaWRkbGV3YXJlKSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdJbmZvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNhY2hlZFJvdXRlSW5mbyA9IGV4aXN0aW5nSW5mbyAmJiAhKFwiaW5pdGlhbFwiIGluIGV4aXN0aW5nSW5mbykgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiA/IGV4aXN0aW5nSW5mbyA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGlzQmFja2dyb3VuZCA9IGlzUXVlcnlVcGRhdGluZztcbiAgICAgICAgICAgIGNvbnN0IGZldGNoTmV4dERhdGFQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgZGF0YUhyZWY6IHRoaXMucGFnZUxvYWRlci5nZXREYXRhSHJlZih7XG4gICAgICAgICAgICAgICAgICAgIGhyZWY6ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBza2lwSW50ZXJwb2xhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXNQYXRoOiBpc05vdEZvdW5kID8gXCIvNDA0XCIgOiByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBoYXNNaWRkbGV3YXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzU2VydmVyUmVuZGVyOiB0aGlzLmlzU3NyLFxuICAgICAgICAgICAgICAgIHBhcnNlSlNPTjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbmZsaWdodENhY2hlOiBpc0JhY2tncm91bmQgPyB0aGlzLnNiYyA6IHRoaXMuc2RjLFxuICAgICAgICAgICAgICAgIHBlcnNpc3RDYWNoZTogIWlzUHJldmlldyxcbiAgICAgICAgICAgICAgICBpc1ByZWZldGNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGUsXG4gICAgICAgICAgICAgICAgaXNCYWNrZ3JvdW5kXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBpc1F1ZXJ5VXBkYXRpbmcgJiYgIWlzTWlkZGxld2FyZVJld3JpdGUgPyBudWxsIDogYXdhaXQgd2l0aE1pZGRsZXdhcmVFZmZlY3RzKHtcbiAgICAgICAgICAgICAgICBmZXRjaERhdGE6ICgpPT5mZXRjaE5leHREYXRhKGZldGNoTmV4dERhdGFQYXJhbXMpLFxuICAgICAgICAgICAgICAgIGFzUGF0aDogaXNOb3RGb3VuZCA/IFwiLzQwNFwiIDogcmVzb2x2ZWRBcyxcbiAgICAgICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpPT57XG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGFyZCBlcnJvciBkdXJpbmcgcXVlcnkgdXBkYXRpbmdcbiAgICAgICAgICAgICAgICAvLyBhcyBpdCdzIHVuLW5lY2Vzc2FyeSBhbmQgZG9lc24ndCBuZWVkIHRvIGJlIGZhdGFsXG4gICAgICAgICAgICAgICAgLy8gdW5sZXNzIGl0IGlzIGEgZmFsbGJhY2sgcm91dGUgYW5kIHRoZSBwcm9wcyBjYW4ndFxuICAgICAgICAgICAgICAgIC8vIGJlIGxvYWRlZFxuICAgICAgICAgICAgICAgIGlmIChpc1F1ZXJ5VXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gd2hlbiByZW5kZXJpbmcgZXJyb3Igcm91dGVzIHdlIGRvbid0IGFwcGx5IG1pZGRsZXdhcmVcbiAgICAgICAgICAgIC8vIGVmZmVjdHNcbiAgICAgICAgICAgIGlmIChkYXRhICYmIChwYXRobmFtZSA9PT0gXCIvX2Vycm9yXCIgfHwgcGF0aG5hbWUgPT09IFwiLzQwNFwiKSkge1xuICAgICAgICAgICAgICAgIGRhdGEuZWZmZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUXVlcnlVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAganNvbjogc2VsZi5fX05FWFRfREFUQV9fLnByb3BzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qc29uID0gc2VsZi5fX05FWFRfREFUQV9fLnByb3BzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbGxlZCgpO1xuICAgICAgICAgICAgaWYgKChkYXRhID09IG51bGwgPyB2b2lkIDAgOiAoX2RhdGFfZWZmZWN0ID0gZGF0YS5lZmZlY3QpID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YV9lZmZlY3QudHlwZSkgPT09IFwicmVkaXJlY3QtaW50ZXJuYWxcIiB8fCAoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogKF9kYXRhX2VmZmVjdDEgPSBkYXRhLmVmZmVjdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhX2VmZmVjdDEudHlwZSkgPT09IFwicmVkaXJlY3QtZXh0ZXJuYWxcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmVmZmVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogKF9kYXRhX2VmZmVjdDIgPSBkYXRhLmVmZmVjdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhX2VmZmVjdDIudHlwZSkgPT09IFwicmV3cml0ZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRSb3V0ZSA9ICgwLCBfcmVtb3ZldHJhaWxpbmdzbGFzaC5yZW1vdmVUcmFpbGluZ1NsYXNoKShkYXRhLmVmZmVjdC5yZXNvbHZlZEhyZWYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VzID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLmdldFBhZ2VMaXN0KCk7XG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIHF1ZXJ5IHVwZGF0aW5nIHRoZSBwYWdlIG11c3QgbWF0Y2ggYWx0aG91Z2ggZHVyaW5nXG4gICAgICAgICAgICAgICAgLy8gY2xpZW50LXRyYW5zaXRpb24gYSByZWRpcmVjdCB0aGF0IGRvZXNuJ3QgbWF0Y2ggYSBwYWdlXG4gICAgICAgICAgICAgICAgLy8gY2FuIGJlIHJldHVybmVkIGFuZCB0aGlzIHNob3VsZCB0cmlnZ2VyIGEgaGFyZCBuYXZpZ2F0aW9uXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgdmFsaWQgZm9yIGluY3JlbWVudGFsIG1pZ3JhdGlvblxuICAgICAgICAgICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nIHx8IHBhZ2VzLmluY2x1ZGVzKHJlc29sdmVkUm91dGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlID0gcmVzb2x2ZWRSb3V0ZTtcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUgPSBkYXRhLmVmZmVjdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhLmVmZmVjdC5wYXJzZWRBcy5xdWVyeVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZEFzID0gKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkoKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKGRhdGEuZWZmZWN0LnBhcnNlZEFzLnBhdGhuYW1lLCB0aGlzLmxvY2FsZXMpLnBhdGhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgYWdhaW4gdGhlIGNhY2hlIHdpdGggdGhlIG5ldyBkZXN0aW5hdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdJbmZvID0gdGhpcy5jb21wb25lbnRzW3JvdXRlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdXRlUHJvcHMuc2hhbGxvdyAmJiBleGlzdGluZ0luZm8gJiYgdGhpcy5yb3V0ZSA9PT0gcm91dGUgJiYgIWhhc01pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBtYXRjaCB3aXRoIHRoZSBjdXJyZW50IHJvdXRlIGR1ZSB0byByZXdyaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgY2FuIGNvcHkgdGhlIGV4aXN0aW5nIGluZm9ybWF0aW9uIHRvIHRoZSByZXdyaXR0ZW4gb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlbiwgd2UgcmV0dXJuIHRoZSBpbmZvcm1hdGlvbiBhbG9uZyB3aXRoIHRoZSBtYXRjaGVkIHJvdXRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0luZm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKDAsIF9pc2FwaXJvdXRlLmlzQVBJUm91dGUpKHJvdXRlKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBhcyxcbiAgICAgICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpPT57fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByb3V0ZUluZm8gPSBjYWNoZWRSb3V0ZUluZm8gfHwgYXdhaXQgdGhpcy5mZXRjaENvbXBvbmVudChyb3V0ZSkudGhlbigocmVzKT0+KHtcbiAgICAgICAgICAgICAgICAgICAgQ29tcG9uZW50OiByZXMucGFnZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldHM6IHJlcy5zdHlsZVNoZWV0cyxcbiAgICAgICAgICAgICAgICAgICAgX19OX1NTRzogcmVzLm1vZC5fX05fU1NHLFxuICAgICAgICAgICAgICAgICAgICBfX05fU1NQOiByZXMubW9kLl9fTl9TU1BcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBpc1ZhbGlkRWxlbWVudFR5cGUgIH0gPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWlzXCIpO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHJvdXRlSW5mby5Db21wb25lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGRlZmF1bHQgZXhwb3J0IGlzIG5vdCBhIFJlYWN0IENvbXBvbmVudCBpbiBwYWdlOiBcIicgKyBwYXRobmFtZSArICdcIicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHdhc0JhaWxlZFByZWZldGNoID0gZGF0YSA9PSBudWxsID8gdm9pZCAwIDogKF9kYXRhX3Jlc3BvbnNlID0gZGF0YS5yZXNwb25zZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhX3Jlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC1taWRkbGV3YXJlLXNraXBcIik7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRGZXRjaERhdGEgPSByb3V0ZUluZm8uX19OX1NTRyB8fCByb3V0ZUluZm8uX19OX1NTUDtcbiAgICAgICAgICAgIC8vIEZvciBub24tU1NHIHByZWZldGNoZXMgdGhhdCBiYWlsZWQgYmVmb3JlIHNlbmRpbmcgZGF0YVxuICAgICAgICAgICAgLy8gd2UgY2xlYXIgdGhlIGNhY2hlIHRvIGZldGNoIGZ1bGwgcmVzcG9uc2VcbiAgICAgICAgICAgIGlmICh3YXNCYWlsZWRQcmVmZXRjaCAmJiAoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5kYXRhSHJlZikpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zZGNbZGF0YS5kYXRhSHJlZl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzICwgY2FjaGVLZXkgIH0gPSBhd2FpdCB0aGlzLl9nZXREYXRhKGFzeW5jICgpPT57XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZEZldGNoRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuanNvbikgJiYgIXdhc0JhaWxlZFByZWZldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlS2V5OiBkYXRhLmNhY2hlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzOiBkYXRhLmpzb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YUhyZWYgPSAoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5kYXRhSHJlZikgPyBkYXRhLmRhdGFIcmVmIDogdGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNQYXRoOiByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZXRjaGVkID0gYXdhaXQgZmV0Y2hOZXh0RGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhSHJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VydmVyUmVuZGVyOiB0aGlzLmlzU3NyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VKU09OOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRDYWNoZTogd2FzQmFpbGVkUHJlZmV0Y2ggPyB7fSA6IHRoaXMuc2RjLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdENhY2hlOiAhaXNQcmV2aWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmVmZXRjaDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUtleTogZmV0Y2hlZC5jYWNoZUtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzOiBmZXRjaGVkLmpzb24gfHwge31cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiBhd2FpdCB0aGlzLmdldEluaXRpYWxQcm9wcyhyb3V0ZUluZm8uQ29tcG9uZW50LCAvLyB3ZSBwcm92aWRlIEFwcFRyZWUgbGF0ZXIgc28gdGhpcyBuZWVkcyB0byBiZSBgYW55YFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNQYXRoOiBhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZXM6IHRoaXMubG9jYWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMb2NhbGU6IHRoaXMuZGVmYXVsdExvY2FsZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIE9ubHkgYnVzdCB0aGUgZGF0YSBjYWNoZSBmb3IgU1NQIHJvdXRlcyBhbHRob3VnaFxuICAgICAgICAgICAgLy8gbWlkZGxld2FyZSBjYW4gc2tpcCBjYWNoZSBwZXIgcmVxdWVzdCB3aXRoXG4gICAgICAgICAgICAvLyB4LW1pZGRsZXdhcmUtY2FjaGU6IG5vLWNhY2hlIGFzIHdlbGxcbiAgICAgICAgICAgIGlmIChyb3V0ZUluZm8uX19OX1NTUCAmJiBmZXRjaE5leHREYXRhUGFyYW1zLmRhdGFIcmVmICYmIGNhY2hlS2V5KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2RjW2NhY2hlS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHdlIGtpY2sgb2ZmIGEgSEVBRCByZXF1ZXN0IGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgICAgICAgICAvLyB3aGVuIGEgbm9uLXByZWZldGNoIHJlcXVlc3QgaXMgbWFkZSB0byBzaWduYWwgcmV2YWxpZGF0aW9uXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNQcmV2aWV3ICYmIHJvdXRlSW5mby5fX05fU1NHICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIgJiYgIWlzUXVlcnlVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIGZldGNoTmV4dERhdGEoT2JqZWN0LmFzc2lnbih7fSwgZmV0Y2hOZXh0RGF0YVBhcmFtcywge1xuICAgICAgICAgICAgICAgICAgICBpc0JhY2tncm91bmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3RDYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGluZmxpZ2h0Q2FjaGU6IHRoaXMuc2JjXG4gICAgICAgICAgICAgICAgfSkpLmNhdGNoKCgpPT57fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wcy5wYWdlUHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBwcm9wcy5wYWdlUHJvcHMpO1xuICAgICAgICAgICAgcm91dGVJbmZvLnByb3BzID0gcHJvcHM7XG4gICAgICAgICAgICByb3V0ZUluZm8ucm91dGUgPSByb3V0ZTtcbiAgICAgICAgICAgIHJvdXRlSW5mby5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICAgICAgcm91dGVJbmZvLnJlc29sdmVkQXMgPSByZXNvbHZlZEFzO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzW3JvdXRlXSA9IHJvdXRlSW5mbztcbiAgICAgICAgICAgIHJldHVybiByb3V0ZUluZm87XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUm91dGVJbmZvRXJyb3IoKDAsIF9pc2Vycm9yLmdldFByb3BlckVycm9yKShlcnIpLCBwYXRobmFtZSwgcXVlcnksIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQoc3RhdGUsIGRhdGEsIHJlc2V0U2Nyb2xsKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViKGRhdGEsIHRoaXMuY29tcG9uZW50c1tcIi9fYXBwXCJdLkNvbXBvbmVudCwgcmVzZXRTY3JvbGwpO1xuICAgIH1cbiAgICAvKipcbiAgICogQ2FsbGJhY2sgdG8gZXhlY3V0ZSBiZWZvcmUgcmVwbGFjaW5nIHJvdXRlciBzdGF0ZVxuICAgKiBAcGFyYW0gY2IgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWRcbiAgICovIGJlZm9yZVBvcFN0YXRlKGNiKSB7XG4gICAgICAgIHRoaXMuX2JwcyA9IGNiO1xuICAgIH1cbiAgICBvbmx5QUhhc2hDaGFuZ2UoYXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFzUGF0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBbb2xkVXJsTm9IYXNoLCBvbGRIYXNoXSA9IHRoaXMuYXNQYXRoLnNwbGl0KFwiI1wiKTtcbiAgICAgICAgY29uc3QgW25ld1VybE5vSGFzaCwgbmV3SGFzaF0gPSBhcy5zcGxpdChcIiNcIik7XG4gICAgICAgIC8vIE1ha2VzIHN1cmUgd2Ugc2Nyb2xsIHRvIHRoZSBwcm92aWRlZCBoYXNoIGlmIHRoZSB1cmwvaGFzaCBhcmUgdGhlIHNhbWVcbiAgICAgICAgaWYgKG5ld0hhc2ggJiYgb2xkVXJsTm9IYXNoID09PSBuZXdVcmxOb0hhc2ggJiYgb2xkSGFzaCA9PT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIHVybHMgYXJlIGNoYW5nZSwgdGhlcmUncyBtb3JlIHRoYW4gYSBoYXNoIGNoYW5nZVxuICAgICAgICBpZiAob2xkVXJsTm9IYXNoICE9PSBuZXdVcmxOb0hhc2gpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgaGFzaCBoYXMgY2hhbmdlZCwgdGhlbiBpdCdzIGEgaGFzaCBvbmx5IGNoYW5nZS5cbiAgICAgICAgLy8gVGhpcyBjaGVjayBpcyBuZWNlc3NhcnkgdG8gaGFuZGxlIGJvdGggdGhlIGVudGVyIGFuZFxuICAgICAgICAvLyBsZWF2ZSBoYXNoID09PSAnJyBjYXNlcy4gVGhlIGlkZW50aXR5IGNhc2UgZmFsbHMgdGhyb3VnaFxuICAgICAgICAvLyBhbmQgaXMgdHJlYXRlZCBhcyBhIG5leHQgcmVsb2FkLlxuICAgICAgICByZXR1cm4gb2xkSGFzaCAhPT0gbmV3SGFzaDtcbiAgICB9XG4gICAgc2Nyb2xsVG9IYXNoKGFzKSB7XG4gICAgICAgIGNvbnN0IFssIGhhc2ggPSBcIlwiXSA9IGFzLnNwbGl0KFwiI1wiKTtcbiAgICAgICAgLy8gU2Nyb2xsIHRvIHRvcCBpZiB0aGUgaGFzaCBpcyBqdXN0IGAjYCB3aXRoIG5vIHZhbHVlIG9yIGAjdG9wYFxuICAgICAgICAvLyBUbyBtaXJyb3IgYnJvd3NlcnNcbiAgICAgICAgaWYgKGhhc2ggPT09IFwiXCIgfHwgaGFzaCA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgICAgKDAsIF9oYW5kbGVzbW9vdGhzY3JvbGwuaGFuZGxlU21vb3RoU2Nyb2xsKSgoKT0+d2luZG93LnNjcm9sbFRvKDAsIDApKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWNvZGUgaGFzaCB0byBtYWtlIG5vbi1sYXRpbiBhbmNob3Igd29ya3MuXG4gICAgICAgIGNvbnN0IHJhd0hhc2ggPSBkZWNvZGVVUklDb21wb25lbnQoaGFzaCk7XG4gICAgICAgIC8vIEZpcnN0IHdlIGNoZWNrIGlmIHRoZSBlbGVtZW50IGJ5IGlkIGlzIGZvdW5kXG4gICAgICAgIGNvbnN0IGlkRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyYXdIYXNoKTtcbiAgICAgICAgaWYgKGlkRWwpIHtcbiAgICAgICAgICAgICgwLCBfaGFuZGxlc21vb3Roc2Nyb2xsLmhhbmRsZVNtb290aFNjcm9sbCkoKCk9PmlkRWwuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBlbGVtZW50IHdpdGggdGhlIGlkLCB3ZSBjaGVjayB0aGUgYG5hbWVgIHByb3BlcnR5XG4gICAgICAgIC8vIFRvIG1pcnJvciBicm93c2Vyc1xuICAgICAgICBjb25zdCBuYW1lRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShyYXdIYXNoKVswXTtcbiAgICAgICAgaWYgKG5hbWVFbCkge1xuICAgICAgICAgICAgKDAsIF9oYW5kbGVzbW9vdGhzY3JvbGwuaGFuZGxlU21vb3RoU2Nyb2xsKSgoKT0+bmFtZUVsLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVybElzTmV3KGFzUGF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc1BhdGggIT09IGFzUGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFByZWZldGNoIHBhZ2UgY29kZSwgeW91IG1heSB3YWl0IGZvciB0aGUgZGF0YSBkdXJpbmcgcGFnZSByZW5kZXJpbmcuXG4gICAqIFRoaXMgZmVhdHVyZSBvbmx5IHdvcmtzIGluIHByb2R1Y3Rpb24hXG4gICAqIEBwYXJhbSB1cmwgdGhlIGhyZWYgb2YgcHJlZmV0Y2hlZCBwYWdlXG4gICAqIEBwYXJhbSBhc1BhdGggdGhlIGFzIHBhdGggb2YgdGhlIHByZWZldGNoZWQgcGFnZVxuICAgKi8gYXN5bmMgcHJlZmV0Y2godXJsLCBhc1BhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGFzUGF0aCA9PT0gdm9pZCAwKSBhc1BhdGggPSB1cmw7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgLy8gUHJlZmV0Y2ggaXMgbm90IHN1cHBvcnRlZCBpbiBkZXZlbG9wbWVudCBtb2RlIGJlY2F1c2UgaXQgd291bGQgdHJpZ2dlciBvbi1kZW1hbmQtZW50cmllc1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgKDAsIF9pc2JvdC5pc0JvdCkod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICAvLyBObyBwcmVmZXRjaGVzIGZvciBib3RzIHRoYXQgcmVuZGVyIHRoZSBsaW5rIHNpbmNlIHRoZXkgYXJlIHR5cGljYWxseSBuYXZpZ2F0aW5nXG4gICAgICAgICAgICAvLyBsaW5rcyB2aWEgdGhlIGVxdWl2YWxlbnQgb2YgYSBoYXJkIG5hdmlnYXRpb24gYW5kIGhlbmNlIG5ldmVyIHV0aWxpemUgdGhlc2VcbiAgICAgICAgICAgIC8vIHByZWZldGNoZXMuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcnNlZCA9ICgwLCBfcGFyc2VyZWxhdGl2ZXVybC5wYXJzZVJlbGF0aXZlVXJsKSh1cmwpO1xuICAgICAgICBjb25zdCB1cmxQYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgbGV0IHsgcGF0aG5hbWUgLCBxdWVyeSAgfSA9IHBhcnNlZDtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKHBhdGhuYW1lLCB0aGlzLmxvY2FsZXMpLnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShwYXJzZWQpO1xuICAgICAgICAgICAgICAgIGxldCBwYXJzZWRBcyA9ICgwLCBfcGFyc2VyZWxhdGl2ZXVybC5wYXJzZVJlbGF0aXZlVXJsKShhc1BhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsZVBhdGhSZXN1bHQgPSAoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkocGFyc2VkQXMucGF0aG5hbWUsIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXMucGF0aG5hbWUgPSBsb2NhbGVQYXRoUmVzdWx0LnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubG9jYWxlID0gbG9jYWxlUGF0aFJlc3VsdC5kZXRlY3RlZExvY2FsZSB8fCB0aGlzLmRlZmF1bHRMb2NhbGU7XG4gICAgICAgICAgICAgICAgYXNQYXRoID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZEFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWdlcyA9IGF3YWl0IHRoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpO1xuICAgICAgICBsZXQgcmVzb2x2ZWRBcyA9IGFzUGF0aDtcbiAgICAgICAgY29uc3QgbG9jYWxlID0gdHlwZW9mIG9wdGlvbnMubG9jYWxlICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5sb2NhbGUgfHwgdW5kZWZpbmVkIDogdGhpcy5sb2NhbGU7XG4gICAgICAgIGNvbnN0IGlzTWlkZGxld2FyZU1hdGNoID0gYXdhaXQgbWF0Y2hlc01pZGRsZXdhcmUoe1xuICAgICAgICAgICAgYXNQYXRoOiBhc1BhdGgsXG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9IQVNfUkVXUklURVMgJiYgYXNQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgICAgICBsZXQgcmV3cml0ZXM7XG4gICAgICAgICAgICAoeyBfX3Jld3JpdGVzOiByZXdyaXRlcyAgfSA9IGF3YWl0ICgwLCBfcm91dGVsb2FkZXIuZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCkoKSk7XG4gICAgICAgICAgICBjb25zdCByZXdyaXRlc1Jlc3VsdCA9ICgwLCBfcmVzb2x2ZXJld3JpdGVzLmRlZmF1bHQpKCgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkoYXNQYXRoLCB0aGlzLmxvY2FsZSksIHRydWUpLCBwYWdlcywgcmV3cml0ZXMsIHBhcnNlZC5xdWVyeSwgKHApPT5yZXNvbHZlRHluYW1pY1JvdXRlKHAsIHBhZ2VzKSwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgIGlmIChyZXdyaXRlc1Jlc3VsdC5leHRlcm5hbERlc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTWlkZGxld2FyZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBcyA9ICgwLCBfcmVtb3ZlbG9jYWxlLnJlbW92ZUxvY2FsZSkoKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkocmV3cml0ZXNSZXN1bHQuYXNQYXRoKSwgdGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJld3JpdGVzUmVzdWx0Lm1hdGNoZWRQYWdlICYmIHJld3JpdGVzUmVzdWx0LnJlc29sdmVkSHJlZikge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlyZWN0bHkgbWF0Y2hlcyBhIHBhZ2Ugd2UgbmVlZCB0byB1cGRhdGUgdGhlIGhyZWYgdG9cbiAgICAgICAgICAgICAgICAvLyBhbGxvdyB0aGUgY29ycmVjdCBwYWdlIGNodW5rIHRvIGJlIGxvYWRlZFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIGlmICghaXNNaWRkbGV3YXJlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHJlc29sdmVEeW5hbWljUm91dGUocGFyc2VkLnBhdGhuYW1lLCBwYWdlcyk7XG4gICAgICAgIGlmICgoMCwgX2lzZHluYW1pYy5pc0R5bmFtaWNSb3V0ZSkocGFyc2VkLnBhdGhuYW1lKSkge1xuICAgICAgICAgICAgcGF0aG5hbWUgPSBwYXJzZWQucGF0aG5hbWU7XG4gICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksICgwLCBfcm91dGVtYXRjaGVyLmdldFJvdXRlTWF0Y2hlcikoKDAsIF9yb3V0ZXJlZ2V4LmdldFJvdXRlUmVnZXgpKHBhcnNlZC5wYXRobmFtZSkpKCgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkoYXNQYXRoKS5wYXRobmFtZSkgfHwge30pO1xuICAgICAgICAgICAgaWYgKCFpc01pZGRsZXdhcmVNYXRjaCkge1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShwYXJzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBwcm9jZXNzLmVudi5fX05FWFRfTUlERExFV0FSRV9QUkVGRVRDSCA9PT0gXCJzdHJpY3RcIiA/IG51bGwgOiBhd2FpdCB3aXRoTWlkZGxld2FyZUVmZmVjdHMoe1xuICAgICAgICAgICAgZmV0Y2hEYXRhOiAoKT0+ZmV0Y2hOZXh0RGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFIcmVmOiB0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogb3JpZ2luYWxQYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwSW50ZXJwb2xhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzUGF0aDogcmVzb2x2ZWRBcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgaGFzTWlkZGxld2FyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaXNTZXJ2ZXJSZW5kZXI6IHRoaXMuaXNTc3IsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSlNPTjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRDYWNoZTogdGhpcy5zZGMsXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3RDYWNoZTogIXRoaXMuaXNQcmV2aWV3LFxuICAgICAgICAgICAgICAgICAgICBpc1ByZWZldGNoOiB0cnVlXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBhc1BhdGg6IGFzUGF0aCxcbiAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgKiBJZiB0aGVyZSB3YXMgYSByZXdyaXRlIHdlIGFwcGx5IHRoZSBlZmZlY3RzIG9mIHRoZSByZXdyaXRlIG9uIHRoZVxuICAgICAqIGN1cnJlbnQgcGFyYW1ldGVycyBmb3IgdGhlIHByZWZldGNoLlxuICAgICAqLyBpZiAoKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuZWZmZWN0LnR5cGUpID09PSBcInJld3JpdGVcIikge1xuICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gZGF0YS5lZmZlY3QucmVzb2x2ZWRIcmVmO1xuICAgICAgICAgICAgcGF0aG5hbWUgPSBkYXRhLmVmZmVjdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICBxdWVyeSA9IHtcbiAgICAgICAgICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgICAgICAgICAuLi5kYXRhLmVmZmVjdC5wYXJzZWRBcy5xdWVyeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc29sdmVkQXMgPSBkYXRhLmVmZmVjdC5wYXJzZWRBcy5wYXRobmFtZTtcbiAgICAgICAgICAgIHVybCA9ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShwYXJzZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAqIElmIHRoZXJlIGlzIGEgcmVkaXJlY3QgdG8gYW4gZXh0ZXJuYWwgZGVzdGluYXRpb24gdGhlbiB3ZSBkb24ndCBoYXZlXG4gICAgICogdG8gcHJlZmV0Y2ggY29udGVudCBhcyBpdCB3aWxsIGJlIHVudXNlZC5cbiAgICAgKi8gaWYgKChkYXRhID09IG51bGwgPyB2b2lkIDAgOiBkYXRhLmVmZmVjdC50eXBlKSA9PT0gXCJyZWRpcmVjdC1leHRlcm5hbFwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91dGUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy5fYmZsKGFzUGF0aCwgcmVzb2x2ZWRBcywgb3B0aW9ucy5sb2NhbGUsIHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHNbdXJsUGF0aG5hbWVdID0ge1xuICAgICAgICAgICAgICAgIF9fYXBwUm91dGVyOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMucGFnZUxvYWRlci5faXNTc2cocm91dGUpLnRoZW4oKGlzU3NnKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1NzZyA/IGZldGNoTmV4dERhdGEoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhSHJlZjogKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuanNvbikgPyBkYXRhID09IG51bGwgPyB2b2lkIDAgOiBkYXRhLmRhdGFIcmVmIDogdGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzUGF0aDogcmVzb2x2ZWRBcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpc1NlcnZlclJlbmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSlNPTjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRDYWNoZTogdGhpcy5zZGMsXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3RDYWNoZTogIXRoaXMuaXNQcmV2aWV3LFxuICAgICAgICAgICAgICAgICAgICBpc1ByZWZldGNoOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGU6IG9wdGlvbnMudW5zdGFibGVfc2tpcENsaWVudENhY2hlIHx8IG9wdGlvbnMucHJpb3JpdHkgJiYgISFwcm9jZXNzLmVudi5fX05FWFRfT1BUSU1JU1RJQ19DTElFTlRfQ0FDSEVcbiAgICAgICAgICAgICAgICB9KS50aGVuKCgpPT5mYWxzZSkuY2F0Y2goKCk9PmZhbHNlKSA6IGZhbHNlO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXJbb3B0aW9ucy5wcmlvcml0eSA/IFwibG9hZFBhZ2VcIiA6IFwicHJlZmV0Y2hcIl0ocm91dGUpXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaENvbXBvbmVudChyb3V0ZSkge1xuICAgICAgICBjb25zdCBoYW5kbGVDYW5jZWxsZWQgPSBnZXRDYW5jZWxsZWRIYW5kbGVyKHtcbiAgICAgICAgICAgIHJvdXRlLFxuICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50UmVzdWx0ID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLmxvYWRQYWdlKHJvdXRlKTtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbGxlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBoYW5kbGVDYW5jZWxsZWQoKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0RGF0YShmbikge1xuICAgICAgICBsZXQgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNhbmNlbCA9ICgpPT57XG4gICAgICAgICAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsYyA9IGNhbmNlbDtcbiAgICAgICAgcmV0dXJuIGZuKCkudGhlbigoZGF0YSk9PntcbiAgICAgICAgICAgIGlmIChjYW5jZWwgPT09IHRoaXMuY2xjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgaW5pdGlhbCBwcm9wcyBjYW5jZWxsZWRcIik7XG4gICAgICAgICAgICAgICAgZXJyLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0RmxpZ2h0RGF0YShkYXRhSHJlZikge1xuICAgICAgICAvLyBEbyBub3QgY2FjaGUgUlNDIGZsaWdodCByZXNwb25zZSBzaW5jZSBpdCdzIG5vdCBhIHN0YXRpYyByZXNvdXJjZVxuICAgICAgICByZXR1cm4gZmV0Y2hOZXh0RGF0YSh7XG4gICAgICAgICAgICBkYXRhSHJlZixcbiAgICAgICAgICAgIGlzU2VydmVyUmVuZGVyOiB0cnVlLFxuICAgICAgICAgICAgcGFyc2VKU09OOiBmYWxzZSxcbiAgICAgICAgICAgIGluZmxpZ2h0Q2FjaGU6IHRoaXMuc2RjLFxuICAgICAgICAgICAgcGVyc2lzdENhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzUHJlZmV0Y2g6IGZhbHNlXG4gICAgICAgIH0pLnRoZW4oKHBhcmFtKT0+e1xuICAgICAgICAgICAgbGV0IHsgdGV4dCAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB0ZXh0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0SW5pdGlhbFByb3BzKENvbXBvbmVudCwgY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgQ29tcG9uZW50OiBBcHAgIH0gPSB0aGlzLmNvbXBvbmVudHNbXCIvX2FwcFwiXTtcbiAgICAgICAgY29uc3QgQXBwVHJlZSA9IHRoaXMuX3dyYXBBcHAoQXBwKTtcbiAgICAgICAgY3R4LkFwcFRyZWUgPSBBcHBUcmVlO1xuICAgICAgICByZXR1cm4gKDAsIF91dGlscy5sb2FkR2V0SW5pdGlhbFByb3BzKShBcHAsIHtcbiAgICAgICAgICAgIEFwcFRyZWUsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICByb3V0ZXI6IHRoaXMsXG4gICAgICAgICAgICBjdHhcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCByb3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucm91dGU7XG4gICAgfVxuICAgIGdldCBwYXRobmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucGF0aG5hbWU7XG4gICAgfVxuICAgIGdldCBxdWVyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucXVlcnk7XG4gICAgfVxuICAgIGdldCBhc1BhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmFzUGF0aDtcbiAgICB9XG4gICAgZ2V0IGxvY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubG9jYWxlO1xuICAgIH1cbiAgICBnZXQgaXNGYWxsYmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNGYWxsYmFjaztcbiAgICB9XG4gICAgZ2V0IGlzUHJldmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNQcmV2aWV3O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXRobmFtZSwgcXVlcnksIGFzLCB7IGluaXRpYWxQcm9wcyAsIHBhZ2VMb2FkZXIgLCBBcHAgLCB3cmFwQXBwICwgQ29tcG9uZW50ICwgZXJyICwgc3Vic2NyaXB0aW9uICwgaXNGYWxsYmFjayAsIGxvY2FsZSAsIGxvY2FsZXMgLCBkZWZhdWx0TG9jYWxlICwgZG9tYWluTG9jYWxlcyAsIGlzUHJldmlldyAgfSl7XG4gICAgICAgIC8vIFNlcnZlciBEYXRhIENhY2hlIChmdWxsIGRhdGEgcmVxdWVzdHMpXG4gICAgICAgIHRoaXMuc2RjID0ge307XG4gICAgICAgIC8vIFNlcnZlciBCYWNrZ3JvdW5kIENhY2hlIChIRUFEIHJlcXVlc3RzKVxuICAgICAgICB0aGlzLnNiYyA9IHt9O1xuICAgICAgICB0aGlzLmlzRmlyc3RQb3BTdGF0ZUV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fa2V5ID0gY3JlYXRlS2V5KCk7XG4gICAgICAgIHRoaXMub25Qb3BTdGF0ZSA9IChlKT0+e1xuICAgICAgICAgICAgY29uc3QgeyBpc0ZpcnN0UG9wU3RhdGVFdmVudCAgfSA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmlzRmlyc3RQb3BTdGF0ZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGUuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZ2V0IHN0YXRlIGFzIHVuZGVmaW5lZCBmb3IgdHdvIHJlYXNvbnMuXG4gICAgICAgICAgICAgICAgLy8gIDEuIFdpdGggb2xkZXIgc2FmYXJpICg8IDgpIGFuZCBvbGRlciBjaHJvbWUgKDwgMzQpXG4gICAgICAgICAgICAgICAgLy8gIDIuIFdoZW4gdGhlIFVSTCBjaGFuZ2VkIHdpdGggI1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gSW4gdGhlIGJvdGggY2FzZXMsIHdlIGRvbid0IG5lZWQgdG8gcHJvY2VlZCBhbmQgY2hhbmdlIHRoZSByb3V0ZS5cbiAgICAgICAgICAgICAgICAvLyAoYXMgaXQncyBhbHJlYWR5IGNoYW5nZWQpXG4gICAgICAgICAgICAgICAgLy8gQnV0IHdlIGNhbiBzaW1wbHkgcmVwbGFjZSB0aGUgc3RhdGUgd2l0aCB0aGUgbmV3IGNoYW5nZXMuXG4gICAgICAgICAgICAgICAgLy8gQWN0dWFsbHksIGZvciAoMSkgd2UgZG9uJ3QgbmVlZCB0byBub3RoaW5nLiBCdXQgaXQncyBoYXJkIHRvIGRldGVjdCB0aGF0IGV2ZW50LlxuICAgICAgICAgICAgICAgIC8vIFNvLCBkb2luZyB0aGUgZm9sbG93aW5nIGZvciAoMSkgZG9lcyBubyBoYXJtLlxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgLCBxdWVyeSAgfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShcInJlcGxhY2VTdGF0ZVwiLCAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikoe1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkocGF0aG5hbWUpLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgIH0pLCAoMCwgX3V0aWxzLmdldFVSTCkoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gX19OQSBpcyB1c2VkIHRvIGlkZW50aWZ5IGlmIHRoZSBoaXN0b3J5IGVudHJ5IGNhbiBiZSBoYW5kbGVkIGJ5IHRoZSBhcHAtcm91dGVyLlxuICAgICAgICAgICAgaWYgKHN0YXRlLl9fTkEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5fX04pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTYWZhcmkgZmlyZXMgcG9wc3RhdGVldmVudCB3aGVuIHJlb3BlbmluZyB0aGUgYnJvd3Nlci5cbiAgICAgICAgICAgIGlmIChpc0ZpcnN0UG9wU3RhdGVFdmVudCAmJiB0aGlzLmxvY2FsZSA9PT0gc3RhdGUub3B0aW9ucy5sb2NhbGUgJiYgc3RhdGUuYXMgPT09IHRoaXMuYXNQYXRoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZvcmNlZFNjcm9sbDtcbiAgICAgICAgICAgIGNvbnN0IHsgdXJsICwgYXMgLCBvcHRpb25zICwga2V5ICB9ID0gc3RhdGU7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTikge1xuICAgICAgICAgICAgICAgIGlmIChtYW51YWxTY3JvbGxSZXN0b3JhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fa2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNuYXBzaG90IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiX19uZXh0X3Njcm9sbF9cIiArIHRoaXMuX2tleSwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBzZWxmLnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBzZWxmLnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgb2xkIHNjcm9sbCBwb3NpdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJfX25leHRfc2Nyb2xsX1wiICsga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZWRTY3JvbGwgPSBKU09OLnBhcnNlKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlZFNjcm9sbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XG4gICAgICAgICAgICBjb25zdCB7IHBhdGhuYW1lICB9ID0gKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKHVybCk7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgcmUtcmVuZGVyIG9uIGluaXRpYWwgbG9hZCxcbiAgICAgICAgICAgIC8vIGNhbiBiZSBjYXVzZWQgYnkgbmF2aWdhdGluZyBiYWNrIGZyb20gYW4gZXh0ZXJuYWwgc2l0ZVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTc3IgJiYgYXMgPT09ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKHRoaXMuYXNQYXRoKSAmJiBwYXRobmFtZSA9PT0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkodGhpcy5wYXRobmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgZG93bnN0cmVhbSBhcHBsaWNhdGlvbiByZXR1cm5zIGZhbHN5LCByZXR1cm4uXG4gICAgICAgICAgICAvLyBUaGV5IHdpbGwgdGhlbiBiZSByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHRoaXMuX2JwcyAmJiAhdGhpcy5fYnBzKHN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2hhbmdlKFwicmVwbGFjZVN0YXRlXCIsIHVybCwgYXMsIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBzaGFsbG93OiBvcHRpb25zLnNoYWxsb3cgJiYgdGhpcy5fc2hhbGxvdyxcbiAgICAgICAgICAgICAgICBsb2NhbGU6IG9wdGlvbnMubG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZSxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIGludGVybmFsIHZhbHVlIG5vdCBleHBvc2VkIG9uIHR5cGVzXG4gICAgICAgICAgICAgICAgX2g6IDBcbiAgICAgICAgICAgIH0pLCBmb3JjZWRTY3JvbGwpO1xuICAgICAgICB9O1xuICAgICAgICAvLyByZXByZXNlbnRzIHRoZSBjdXJyZW50IGNvbXBvbmVudCBrZXlcbiAgICAgICAgY29uc3Qgcm91dGUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xuICAgICAgICAvLyBzZXQgdXAgdGhlIGNvbXBvbmVudCBjYWNoZSAoYnkgcm91dGUga2V5cylcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0ge307XG4gICAgICAgIC8vIFdlIHNob3VsZCBub3Qga2VlcCB0aGUgY2FjaGUsIGlmIHRoZXJlJ3MgYW4gZXJyb3JcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGlzIGNhdXNlIGlzc3VlcyB3aGVuIHdoZW4gZ29pbmcgYmFjayBhbmRcbiAgICAgICAgLy8gY29tZSBhZ2FpbiB0byB0aGUgZXJyb3JlZCBwYWdlLlxuICAgICAgICBpZiAocGF0aG5hbWUgIT09IFwiL19lcnJvclwiKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHNbcm91dGVdID0ge1xuICAgICAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb3BzOiBpbml0aWFsUHJvcHMsXG4gICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgIF9fTl9TU0c6IGluaXRpYWxQcm9wcyAmJiBpbml0aWFsUHJvcHMuX19OX1NTRyxcbiAgICAgICAgICAgICAgICBfX05fU1NQOiBpbml0aWFsUHJvcHMgJiYgaW5pdGlhbFByb3BzLl9fTl9TU1BcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wb25lbnRzW1wiL19hcHBcIl0gPSB7XG4gICAgICAgICAgICBDb21wb25lbnQ6IEFwcCxcbiAgICAgICAgICAgIHN0eWxlU2hlZXRzOiBbXVxuICAgICAgICB9O1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0NMSUVOVF9ST1VURVJfRklMVEVSX0VOQUJMRUQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgQmxvb21GaWx0ZXIgIH0gPSByZXF1aXJlKFwiLi4vLi4vbGliL2Jsb29tLWZpbHRlclwiKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRpY0ZpbHRlckRhdGEgPSBwcm9jZXNzLmVudi5fX05FWFRfQ0xJRU5UX1JPVVRFUl9TX0ZJTFRFUjtcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNGaWx0ZXJEYXRhID0gcHJvY2Vzcy5lbnYuX19ORVhUX0NMSUVOVF9ST1VURVJfRF9GSUxURVI7XG4gICAgICAgICAgICBpZiAoc3RhdGljRmlsdGVyRGF0YSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGljRmlsdGVyRGF0YS5oYXNoZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iZmxfcyA9IG5ldyBCbG9vbUZpbHRlcihzdGF0aWNGaWx0ZXJEYXRhLnNpemUsIHN0YXRpY0ZpbHRlckRhdGEuaGFzaGVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9iZmxfcy5pbXBvcnQoc3RhdGljRmlsdGVyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHluYW1pY0ZpbHRlckRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGR5bmFtaWNGaWx0ZXJEYXRhLmhhc2hlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JmbF9kID0gbmV3IEJsb29tRmlsdGVyKGR5bmFtaWNGaWx0ZXJEYXRhLnNpemUsIGR5bmFtaWNGaWx0ZXJEYXRhLmhhc2hlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmZsX2QuaW1wb3J0KGR5bmFtaWNGaWx0ZXJEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0IGZvciBSb3V0ZXIucm91dGVyLmV2ZW50c1xuICAgICAgICAvLyBUT0RPOiBTaG91bGQgYmUgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgbWFqb3IgdmVyc2lvbiBhcyBpdCB3YXMgbmV2ZXIgZG9jdW1lbnRlZFxuICAgICAgICB0aGlzLmV2ZW50cyA9IFJvdXRlci5ldmVudHM7XG4gICAgICAgIHRoaXMucGFnZUxvYWRlciA9IHBhZ2VMb2FkZXI7XG4gICAgICAgIC8vIGlmIGF1dG8gcHJlcmVuZGVyZWQgYW5kIGR5bmFtaWMgcm91dGUgd2FpdCB0byB1cGRhdGUgYXNQYXRoXG4gICAgICAgIC8vIHVudGlsIGFmdGVyIG1vdW50IHRvIHByZXZlbnQgaHlkcmF0aW9uIG1pc21hdGNoXG4gICAgICAgIGNvbnN0IGF1dG9FeHBvcnREeW5hbWljID0gKDAsIF9pc2R5bmFtaWMuaXNEeW5hbWljUm91dGUpKHBhdGhuYW1lKSAmJiBzZWxmLl9fTkVYVF9EQVRBX18uYXV0b0V4cG9ydDtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9ST1VURVJfQkFTRVBBVEggfHwgXCJcIjtcbiAgICAgICAgdGhpcy5zdWIgPSBzdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuY2xjID0gbnVsbDtcbiAgICAgICAgdGhpcy5fd3JhcEFwcCA9IHdyYXBBcHA7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0byBpZ25vcmUgZXh0cmEgcG9wU3RhdGUgaW4gc2FmYXJpIG9uIG5hdmlnYXRpbmdcbiAgICAgICAgLy8gYmFjayBmcm9tIGV4dGVybmFsIHNpdGVcbiAgICAgICAgdGhpcy5pc1NzciA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNMb2NhbGVEb21haW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gISEoc2VsZi5fX05FWFRfREFUQV9fLmdzc3AgfHwgc2VsZi5fX05FWFRfREFUQV9fLmdpcCB8fCBzZWxmLl9fTkVYVF9EQVRBX18uYXBwR2lwICYmICFzZWxmLl9fTkVYVF9EQVRBX18uZ3NwIHx8ICFhdXRvRXhwb3J0RHluYW1pYyAmJiAhc2VsZi5sb2NhdGlvbi5zZWFyY2ggJiYgIXByb2Nlc3MuZW52Ll9fTkVYVF9IQVNfUkVXUklURVMpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgdGhpcy5sb2NhbGVzID0gbG9jYWxlcztcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XG4gICAgICAgICAgICB0aGlzLmRvbWFpbkxvY2FsZXMgPSBkb21haW5Mb2NhbGVzO1xuICAgICAgICAgICAgdGhpcy5pc0xvY2FsZURvbWFpbiA9ICEhKDAsIF9kZXRlY3Rkb21haW5sb2NhbGUuZGV0ZWN0RG9tYWluTG9jYWxlKShkb21haW5Mb2NhbGVzLCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgYXNQYXRoOiBhdXRvRXhwb3J0RHluYW1pYyA/IHBhdGhuYW1lIDogYXMsXG4gICAgICAgICAgICBpc1ByZXZpZXc6ICEhaXNQcmV2aWV3LFxuICAgICAgICAgICAgbG9jYWxlOiBwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUID8gbG9jYWxlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaXNGYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9pbml0aWFsTWF0Y2hlc01pZGRsZXdhcmVQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBcImFzXCIgZG9lc24ndCBzdGFydCB3aXRoIGRvdWJsZSBzbGFzaGVzIG9yIGVsc2UgaXQgY2FuXG4gICAgICAgICAgICAvLyB0aHJvdyBhbiBlcnJvciBhcyBpdCdzIGNvbnNpZGVyZWQgaW52YWxpZFxuICAgICAgICAgICAgaWYgKCFhcy5zdGFydHNXaXRoKFwiLy9cIikpIHtcbiAgICAgICAgICAgICAgICAvLyBpbiBvcmRlciBmb3IgYGUuc3RhdGVgIHRvIHdvcmsgb24gdGhlIGBvbnBvcHN0YXRlYCBldmVudFxuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gcmVnaXN0ZXIgdGhlIGluaXRpYWwgcm91dGUgdXBvbiBpbml0aWFsaXphdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgYXNQYXRoID0gKDAsIF91dGlscy5nZXRVUkwpKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbE1hdGNoZXNNaWRkbGV3YXJlUHJvbWlzZSA9IG1hdGNoZXNNaWRkbGV3YXJlKHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGFzUGF0aFxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKG1hdGNoZXMpPT57XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuX3Nob3VsZFJlc29sdmVIcmVmID0gYXMgIT09IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKFwicmVwbGFjZVN0YXRlXCIsIG1hdGNoZXMgPyBhc1BhdGggOiAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKHBhdGhuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhc1BhdGgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgdGhpcy5vblBvcFN0YXRlKTtcbiAgICAgICAgICAgIC8vIGVuYWJsZSBjdXN0b20gc2Nyb2xsIHJlc3RvcmF0aW9uIGhhbmRsaW5nIHdoZW4gYXZhaWxhYmxlXG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgZmFsbGJhY2sgdG8gYnJvd3NlcidzIGRlZmF1bHQgaGFuZGxpbmdcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4oKCk9PntcbiAgICBSb3V0ZXIuZXZlbnRzID0gKDAsIF9taXR0LmRlZmF1bHQpKCk7XG59KSgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiZGVmYXVsdCIsIm1hdGNoZXNNaWRkbGV3YXJlIiwiY3JlYXRlS2V5IiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVyIiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsIl9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQiLCJfcmVtb3ZldHJhaWxpbmdzbGFzaCIsIl9yb3V0ZWxvYWRlciIsIl9zY3JpcHQiLCJfaXNlcnJvciIsIl8iLCJfZGVub3JtYWxpemVwYWdlcGF0aCIsIl9ub3JtYWxpemVsb2NhbGVwYXRoIiwiX21pdHQiLCJfdXRpbHMiLCJfaXNkeW5hbWljIiwiX3BhcnNlcmVsYXRpdmV1cmwiLCJfcmVzb2x2ZXJld3JpdGVzIiwiX3JvdXRlbWF0Y2hlciIsIl9yb3V0ZXJlZ2V4IiwiX2Zvcm1hdHVybCIsIl9kZXRlY3Rkb21haW5sb2NhbGUiLCJfcGFyc2VwYXRoIiwiX2FkZGxvY2FsZSIsIl9yZW1vdmVsb2NhbGUiLCJfcmVtb3ZlYmFzZXBhdGgiLCJfYWRkYmFzZXBhdGgiLCJfaGFzYmFzZXBhdGgiLCJfaXNhcGlyb3V0ZSIsIl9nZXRuZXh0cGF0aG5hbWVpbmZvIiwiX2Zvcm1hdG5leHRwYXRobmFtZWluZm8iLCJfY29tcGFyZXN0YXRlcyIsIl9pc2xvY2FsdXJsIiwiX2lzYm90IiwiX29taXQiLCJfcmVzb2x2ZWhyZWYiLCJfaW50ZXJwb2xhdGVhcyIsIl9oYW5kbGVzbW9vdGhzY3JvbGwiLCJidWlsZENhbmNlbGxhdGlvbkVycm9yIiwiYXNzaWduIiwiRXJyb3IiLCJjYW5jZWxsZWQiLCJvcHRpb25zIiwibWF0Y2hlcnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJvdXRlciIsInBhZ2VMb2FkZXIiLCJnZXRNaWRkbGV3YXJlIiwicGF0aG5hbWUiLCJhc1BhdGhuYW1lIiwicGFyc2VQYXRoIiwiYXNQYXRoIiwiY2xlYW5lZEFzIiwiaGFzQmFzZVBhdGgiLCJyZW1vdmVCYXNlUGF0aCIsImFzV2l0aEJhc2VQYXRoQW5kTG9jYWxlIiwiYWRkQmFzZVBhdGgiLCJhZGRMb2NhbGUiLCJsb2NhbGUiLCJzb21lIiwibSIsIlJlZ0V4cCIsInJlZ2V4cCIsInRlc3QiLCJzdHJpcE9yaWdpbiIsInVybCIsIm9yaWdpbiIsImdldExvY2F0aW9uT3JpZ2luIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImxlbmd0aCIsInByZXBhcmVVcmxBcyIsImFzIiwicmVzb2x2ZWRIcmVmIiwicmVzb2x2ZWRBcyIsInJlc29sdmVIcmVmIiwiaHJlZldhc0Fic29sdXRlIiwiYXNXYXNBYnNvbHV0ZSIsInByZXBhcmVkVXJsIiwicHJlcGFyZWRBcyIsInJlc29sdmVEeW5hbWljUm91dGUiLCJwYWdlcyIsImNsZWFuUGF0aG5hbWUiLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwiZGVub3JtYWxpemVQYWdlUGF0aCIsImluY2x1ZGVzIiwicGFnZSIsImlzRHluYW1pY1JvdXRlIiwiZ2V0Um91dGVSZWdleCIsInJlIiwiZ2V0TWlkZGxld2FyZURhdGEiLCJzb3VyY2UiLCJyZXNwb25zZSIsIm5leHRDb25maWciLCJiYXNlUGF0aCIsImkxOG4iLCJsb2NhbGVzIiwidHJhaWxpbmdTbGFzaCIsIkJvb2xlYW4iLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1RSQUlMSU5HX1NMQVNIIiwicmV3cml0ZUhlYWRlciIsImhlYWRlcnMiLCJyZXdyaXRlVGFyZ2V0IiwibWF0Y2hlZFBhdGgiLCJfX05FWFRfRVhURVJOQUxfTUlERExFV0FSRV9SRVdSSVRFX1JFU09MVkUiLCJwYXJzZWRSZXdyaXRlVGFyZ2V0IiwicGFyc2VSZWxhdGl2ZVVybCIsInBhdGhuYW1lSW5mbyIsImdldE5leHRQYXRobmFtZUluZm8iLCJwYXJzZURhdGEiLCJmc1BhdGhuYW1lIiwiZ2V0UGFnZUxpc3QiLCJnZXRDbGllbnRCdWlsZE1hbmlmZXN0IiwidGhlbiIsInBhcmFtIiwiX19yZXdyaXRlcyIsInJld3JpdGVzIiwibm9ybWFsaXplTG9jYWxlUGF0aCIsInBhcnNlZFNvdXJjZSIsIl9fTkVYVF9IQVNfUkVXUklURVMiLCJyZXN1bHQiLCJxdWVyeSIsInBhdGgiLCJtYXRjaGVkUGFnZSIsInBhcnNlZEFzIiwicmVzb2x2ZWRQYXRobmFtZSIsIm1hdGNoZXMiLCJnZXRSb3V0ZU1hdGNoZXIiLCJ0eXBlIiwic3JjIiwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyIsImRlZmF1bHRMb2NhbGUiLCJidWlsZElkIiwiZGVzdGluYXRpb24iLCJoYXNoIiwicmVkaXJlY3RUYXJnZXQiLCJuZXdBcyIsIm5ld1VybCIsIndpdGhNaWRkbGV3YXJlRWZmZWN0cyIsImZldGNoRGF0YSIsImRhdGEiLCJlZmZlY3QiLCJkYXRhSHJlZiIsImpzb24iLCJ0ZXh0IiwiY2FjaGVLZXkiLCJlIiwibWFudWFsU2Nyb2xsUmVzdG9yYXRpb24iLCJfX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OIiwid2luZG93IiwiaGlzdG9yeSIsInYiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwibiIsIlNTR19EQVRBX05PVF9GT1VORCIsIlN5bWJvbCIsImZldGNoUmV0cnkiLCJhdHRlbXB0cyIsImZldGNoIiwiY3JlZGVudGlhbHMiLCJtZXRob2QiLCJvayIsInN0YXR1cyIsInRyeVRvUGFyc2VBc0pTT04iLCJKU09OIiwicGFyc2UiLCJlcnJvciIsImZldGNoTmV4dERhdGEiLCJpbmZsaWdodENhY2hlIiwiaXNQcmVmZXRjaCIsImhhc01pZGRsZXdhcmUiLCJpc1NlcnZlclJlbmRlciIsInBhcnNlSlNPTiIsInBlcnNpc3RDYWNoZSIsImlzQmFja2dyb3VuZCIsInVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSIsImhyZWYiLCJVUkwiLCJsb2NhdGlvbiIsIl9wYXJhbXNfbWV0aG9kIiwiZ2V0RGF0YSIsInBhcmFtcyIsInB1cnBvc2UiLCJfdHJ5VG9QYXJzZUFzSlNPTiIsIm5vdEZvdW5kIiwibWFya0Fzc2V0RXJyb3IiLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsImhhbmRsZUhhcmROYXZpZ2F0aW9uIiwiZ2V0Q2FuY2VsbGVkSGFuZGxlciIsInJvdXRlIiwiY2FuY2VsIiwiY2xjIiwiaGFuZGxlQ2FuY2VsbGVkIiwicmVsb2FkIiwiYmFjayIsImZvcndhcmQiLCJwdXNoIiwiX2tleSIsInN0cmluZ2lmeSIsIngiLCJzZWxmIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJjaGFuZ2UiLCJyZXBsYWNlIiwiX2JmbCIsInNraXBOYXZpZ2F0ZSIsIl9fTkVYVF9DTElFTlRfUk9VVEVSX0ZJTFRFUl9FTkFCTEVEIiwibWF0Y2hlc0JmbFN0YXRpYyIsIm1hdGNoZXNCZmxEeW5hbWljIiwiY3VyQXMiLCJhc05vU2xhc2giLCJhc05vU2xhc2hMb2NhbGUiLCJfdGhpc19fYmZsX3MiLCJfdGhpc19fYmZsX3MxIiwiX2JmbF9zIiwiaGFzIiwibm9ybWFsaXplZEFTIiwiY3VyQXNQYXJ0cyIsInNwbGl0IiwiaSIsIl90aGlzX19iZmxfZCIsImN1cnJlbnRQYXJ0Iiwiam9pbiIsIl9iZmxfZCIsImZvcmNlZFNjcm9sbCIsIl90aGlzX2NvbXBvbmVudHNfcGF0aG5hbWUiLCJpc0xvY2FsVVJMIiwiaXNRdWVyeVVwZGF0aW5nIiwiX2giLCJzaGFsbG93Iiwic2hvdWxkUmVzb2x2ZUhyZWYiLCJfc2hvdWxkUmVzb2x2ZUhyZWYiLCJuZXh0U3RhdGUiLCJzdGF0ZSIsInJlYWR5U3RhdGVDaGFuZ2UiLCJpc1JlYWR5IiwiaXNTc3IiLCJwcmV2TG9jYWxlIiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsImxvY2FsZVBhdGhSZXN1bHQiLCJkZXRlY3RlZExvY2FsZSIsImZvcm1hdFdpdGhWYWxpZGF0aW9uIiwiZGlkTmF2aWdhdGUiLCJfdGhpc19sb2NhbGVzIiwiZGV0ZWN0ZWREb21haW4iLCJkZXRlY3REb21haW5Mb2NhbGUiLCJkb21haW5Mb2NhbGVzIiwiaXNMb2NhbGVEb21haW4iLCJob3N0bmFtZSIsImRvbWFpbiIsImFzTm9CYXNlUGF0aCIsImh0dHAiLCJTVCIsInBlcmZvcm1hbmNlIiwibWFyayIsInNjcm9sbCIsInJvdXRlUHJvcHMiLCJfaW5GbGlnaHRSb3V0ZSIsImV2ZW50cyIsImVtaXQiLCJyZW1vdmVMb2NhbGUiLCJsb2NhbGVDaGFuZ2UiLCJvbmx5QUhhc2hDaGFuZ2UiLCJjaGFuZ2VTdGF0ZSIsInNjcm9sbFRvSGFzaCIsInNldCIsImNvbXBvbmVudHMiLCJwYXJzZWQiLCJfX2FwcFJvdXRlciIsInVybElzTmV3IiwicGFyc2VkQXNQYXRobmFtZSIsImlzTWlkZGxld2FyZVJld3JpdGUiLCJpc01pZGRsZXdhcmVNYXRjaCIsInJld3JpdGVzUmVzdWx0IiwicCIsImV4dGVybmFsRGVzdCIsInJvdXRlTWF0Y2giLCJyb3V0ZVJlZ2V4Iiwic2hvdWxkSW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZWRBcyIsImludGVycG9sYXRlQXMiLCJtaXNzaW5nUGFyYW1zIiwia2V5cyIsImdyb3VwcyIsImZpbHRlciIsIm9wdGlvbmFsIiwiY29uc29sZSIsIndhcm4iLCJvbWl0IiwiaXNFcnJvclJvdXRlIiwiX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wcyIsIl9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHNfcGFnZVByb3BzIiwiX3JvdXRlSW5mb19wcm9wcyIsInJvdXRlSW5mbyIsImdldFJvdXRlSW5mbyIsImlzUHJldmlldyIsImlzRmFsbGJhY2siLCJjbGVhbmVkUGFyc2VkUGF0aG5hbWUiLCJmb3JFYWNoIiwia2V5IiwicHJlZml4ZWRBcyIsInJld3JpdGVBcyIsImxvY2FsZVJlc3VsdCIsImN1clJvdXRlTWF0Y2giLCJjb21wb25lbnQiLCJDb21wb25lbnQiLCJ1bnN0YWJsZV9zY3JpcHRMb2FkZXIiLCJzY3JpcHRzIiwiY29uY2F0Iiwic2NyaXB0IiwiaGFuZGxlQ2xpZW50U2NyaXB0TG9hZCIsInByb3BzIiwiX19OX1NTRyIsIl9fTl9TU1AiLCJwYWdlUHJvcHMiLCJfX05fUkVESVJFQ1QiLCJfX05fUkVESVJFQ1RfQkFTRV9QQVRIIiwicGFyc2VkSHJlZiIsIl9fTl9QUkVWSUVXIiwibm90Rm91bmRSb3V0ZSIsImZldGNoQ29tcG9uZW50IiwiaXNOb3RGb3VuZCIsIl9fTkVYVF9EQVRBX18iLCJzdGF0dXNDb2RlIiwiX3JvdXRlSW5mb19yb3V0ZSIsImlzVmFsaWRTaGFsbG93Um91dGUiLCJfb3B0aW9uc19zY3JvbGwiLCJzaG91bGRTY3JvbGwiLCJyZXNldFNjcm9sbCIsInVwY29taW5nU2Nyb2xsU3RhdGUiLCJ1cGNvbWluZ1JvdXRlclN0YXRlIiwiX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wczEiLCJfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wczEiLCJfcm91dGVJbmZvX3Byb3BzMSIsImNhblNraXBVcGRhdGluZyIsImNvbXBhcmVSb3V0ZXJTdGF0ZXMiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImxhbmciLCJoYXNoUmVnZXgiLCJnZXRVUkwiLCJfc2hhbGxvdyIsIl9fTiIsImhhbmRsZVJvdXRlSW5mb0Vycm9yIiwibG9hZEVycm9yRmFpbCIsImlzQXNzZXRFcnJvciIsInN0eWxlU2hlZXRzIiwiZ2V0SW5pdGlhbFByb3BzIiwiZ2lwRXJyIiwicm91dGVJbmZvRXJyIiwicmVxdWVzdGVkUm91dGUiLCJfZGF0YV9lZmZlY3QiLCJfZGF0YV9lZmZlY3QxIiwiX2RhdGFfZWZmZWN0MiIsIl9kYXRhX3Jlc3BvbnNlIiwiZXhpc3RpbmdJbmZvIiwiY2FjaGVkUm91dGVJbmZvIiwiZmV0Y2hOZXh0RGF0YVBhcmFtcyIsImdldERhdGFIcmVmIiwic2tpcEludGVycG9sYXRpb24iLCJzYmMiLCJzZGMiLCJyZXNvbHZlZFJvdXRlIiwiaXNBUElSb3V0ZSIsInJlcyIsIm1vZCIsImlzVmFsaWRFbGVtZW50VHlwZSIsIndhc0JhaWxlZFByZWZldGNoIiwic2hvdWxkRmV0Y2hEYXRhIiwiX2dldERhdGEiLCJmZXRjaGVkIiwiZ2V0UHJvcGVyRXJyb3IiLCJzdWIiLCJiZWZvcmVQb3BTdGF0ZSIsImNiIiwiX2JwcyIsIm9sZFVybE5vSGFzaCIsIm9sZEhhc2giLCJuZXdVcmxOb0hhc2giLCJuZXdIYXNoIiwiaGFuZGxlU21vb3RoU2Nyb2xsIiwic2Nyb2xsVG8iLCJyYXdIYXNoIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaWRFbCIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsSW50b1ZpZXciLCJuYW1lRWwiLCJnZXRFbGVtZW50c0J5TmFtZSIsInByZWZldGNoIiwiaXNCb3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXRobmFtZSIsIm9yaWdpbmFsUGF0aG5hbWUiLCJfX05FWFRfTUlERExFV0FSRV9QUkVGRVRDSCIsIl9pc1NzZyIsImlzU3NnIiwicHJpb3JpdHkiLCJfX05FWFRfT1BUSU1JU1RJQ19DTElFTlRfQ0FDSEUiLCJjb21wb25lbnRSZXN1bHQiLCJsb2FkUGFnZSIsImZuIiwiX2dldEZsaWdodERhdGEiLCJjdHgiLCJBcHAiLCJBcHBUcmVlIiwiX3dyYXBBcHAiLCJsb2FkR2V0SW5pdGlhbFByb3BzIiwiY29uc3RydWN0b3IiLCJpbml0aWFsUHJvcHMiLCJ3cmFwQXBwIiwic3Vic2NyaXB0aW9uIiwiaXNGaXJzdFBvcFN0YXRlRXZlbnQiLCJvblBvcFN0YXRlIiwiX19OQSIsImdldEl0ZW0iLCJpbml0aWFsIiwiQmxvb21GaWx0ZXIiLCJzdGF0aWNGaWx0ZXJEYXRhIiwiX19ORVhUX0NMSUVOVF9ST1VURVJfU19GSUxURVIiLCJkeW5hbWljRmlsdGVyRGF0YSIsIl9fTkVYVF9DTElFTlRfUk9VVEVSX0RfRklMVEVSIiwiaGFzaGVzIiwic2l6ZSIsImltcG9ydCIsImF1dG9FeHBvcnREeW5hbWljIiwiYXV0b0V4cG9ydCIsIl9fTkVYVF9ST1VURVJfQkFTRVBBVEgiLCJnc3NwIiwiZ2lwIiwiYXBwR2lwIiwiZ3NwIiwic2VhcmNoIiwiX2luaXRpYWxNYXRjaGVzTWlkZGxld2FyZVByb21pc2UiLCJhZGRFdmVudExpc3RlbmVyIiwic2Nyb2xsUmVzdG9yYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/router/router.js\n"));

/***/ })

});